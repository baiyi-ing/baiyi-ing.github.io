<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随意</title>
  
  
  <link href="http://baiyi-ing.github.io/atom.xml" rel="self"/>
  
  <link href="http://baiyi-ing.github.io/"/>
  <updated>2022-05-12T11:19:59.862Z</updated>
  <id>http://baiyi-ing.github.io/</id>
  
  <author>
    <name>白依</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ACwing4417-选区间</title>
    <link href="http://baiyi-ing.github.io/2022/05/07/ACwing/ACwing4417-%E9%80%89%E5%8C%BA%E9%97%B4/"/>
    <id>http://baiyi-ing.github.io/2022/05/07/ACwing/ACwing4417-%E9%80%89%E5%8C%BA%E9%97%B4/</id>
    <published>2022-05-07T13:03:23.000Z</published>
    <updated>2022-05-12T11:19:59.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-题目描述"><a href="#一-题目描述" class="headerlink" title="一. 题目描述"></a>一. 题目描述</h1><p>给定 n 个一类区间 (l1,i,r1,i)。</p><p>给定 m 个二类区间 (l2,i,r2,i)。</p><p>请你从一类区间中挑选一个区间，从二类区间中挑选一个区间。</p><p>要求，选出的两个区间之间的距离尽可能大。</p><p>请你输出最大可能距离。</p><p>关于两区间 (l1,r1)和 (l2,r2) 之间的距离，我们规定：</p><ul><li>如果两区间存在交集，则区间距离为 0。</li><li>如果两区间不存在交集，则区间距离为 |i−j| 的最小可能值，其中 l1≤i≤r1,l2≤j≤r2。</li></ul><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数 n。</p><p>接下来 n 行，每行包含两个整数 l1,i,r1,i。</p><p>再一行包含一个整数 m。</p><p>最后 mm 行，每行包含两个整数 l2,i,r2,il2,i,r2,i。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示最大可能距离。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>前三个测试点满足 1≤n,m≤10。<br>所有测试点满足 1≤n,m≤2×105，1≤l1,i≤r1,i≤1091≤l1，1≤l2,i≤r2,i≤109。</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 5</span><br><span class="line">2 6</span><br><span class="line">2 3</span><br><span class="line">2</span><br><span class="line">2 4</span><br><span class="line">6 8</span><br></pre></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 5</span><br><span class="line">2 6</span><br><span class="line">3 7</span><br><span class="line">2</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h1 id="二-笔者解析"><a href="#二-笔者解析" class="headerlink" title="二. 笔者解析"></a>二. 笔者解析</h1><p>本题为经典的区间集合判断题，一般区间判断题我们优先考虑选用<strong>贪心算法</strong>来解题，但由于贪心算法比较玄学，通常为题目中隐藏的数学常识题，所以我们要结合具体问题来分析原题中的隐藏数学原理</p><h1 id="三-笔者代码"><a href="#三-笔者代码" class="headerlink" title="三. 笔者代码"></a>三. 笔者代码</h1><ol><li>c++复杂代码</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line">PII q[N],q2[N];</span><br><span class="line">PII q1[N],q3[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;q[i].y, &amp;q[i].x);</span><br><span class="line">        q1[i].x=q[i].y,q1[i].y=q[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(q1+<span class="number">1</span>,q1+n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;q2[i].x, &amp;q2[i].y);</span><br><span class="line">        q3[i].x=q2[i].y,q3[i].y=q2[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q2+<span class="number">1</span>,q2+m+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(q3+<span class="number">1</span>,q3+m+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> a=<span class="built_in">max</span>(<span class="number">0</span>,q2[m].x-q[<span class="number">1</span>].x);</span><br><span class="line">    <span class="type">int</span> b=<span class="built_in">max</span>(<span class="number">0</span>,q1[n].x-q3[<span class="number">1</span>].x);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>c++贪心常识简化代码</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> max1=<span class="number">0</span>,min1=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        max1=<span class="built_in">max</span>(max1,a);</span><br><span class="line">        min1=<span class="built_in">min</span>(min1,b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="type">int</span> max2=<span class="number">0</span>,min2=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        max2=<span class="built_in">max</span>(max2,a);</span><br><span class="line">        min2=<span class="built_in">min</span>(min2,b);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">max</span>(max2-min1,max1-min2))&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>java贪心常识简化代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">//找到n区间的最大左端点和最小右端点</span></span><br><span class="line">            max = Math.max(scanner.nextInt(),max);</span><br><span class="line">            min = Math.min(scanner.nextInt(),min);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">min1</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">//找到m区间的最大左端点和最小右端点</span></span><br><span class="line">            max1 = Math.max(scanner.nextInt(),max1);</span><br><span class="line">            min1 = Math.min(scanner.nextInt(),min1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最大的左端点减最小的右端点，则为最大不相交区间，本题分两种情况，n区间于m区间的位置不确定</span></span><br><span class="line">        System.out.println(Math.max(<span class="number">0</span>,Math.max(max - min1,max1-min)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四-本题解法"><a href="#四-本题解法" class="headerlink" title="四. 本题解法"></a>四. 本题解法</h1><p>我们可以发现：</p><p><strong>两段不相交的区间中间的间隔 &#x3D; 右边区间的最小值 — 左边区间的最大值</strong></p><p>由此可以得出结论，左边最大值越小或者在右边最小值越大，间隔的范围就越大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-题目描述&quot;&gt;&lt;a href=&quot;#一-题目描述&quot; class=&quot;headerlink&quot; title=&quot;一. 题目描述&quot;&gt;&lt;/a&gt;一. 题目描述&lt;/h1&gt;&lt;p&gt;给定 n 个一类区间 (l1,i,r1,i)。&lt;/p&gt;
&lt;p&gt;给定 m 个二类区间 (l2,i,r2,i</summary>
      
    
    
    
    
    <category term="贪心算法" scheme="http://baiyi-ing.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ACwing4394-最长连续子序列</title>
    <link href="http://baiyi-ing.github.io/2022/04/03/ACwing/ACwing4394-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://baiyi-ing.github.io/2022/04/03/ACwing/ACwing4394-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2022-04-03T08:03:14.000Z</published>
    <updated>2022-04-04T17:00:11.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详细题目"><a href="#详细题目" class="headerlink" title="详细题目"></a>详细题目</h1><p><a href="https://www.acwing.com/problem/content/4397/">ACwing4394最长连续子序列</a></p><p>给定一个长度为 n 的整数序列 a1,a2,…</p><p>请你找出它的一个最长<strong>连续</strong>子序列，要求该子序列包含不超过 k 个不同的值。</p><p><strong>输入格式</strong></p><p>第一行包含两个整数 n,k</p><p>第二行包含 nn 个整数 a1,a2,…</p><p><strong>输出格式</strong></p><p>共一行，两个整数 l,r 表示你找出的满足条件的最长连续子序列的最左端元素下标和最右端元素下标。</p><p>如果答案不唯一，输出任意合理方案均可。</p><p><strong>数据范围</strong></p><p>前 66 个测试点满足 1≤k≤n≤10<br>所有测试点满足 1≤k≤n≤5×10^5, 0≤ai≤10^6</p><p><strong>输入样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 5</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9 3</span><br><span class="line">6 5 1 2 3 2 1 4 5</span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 7</span><br></pre></td></tr></table></figure><p><strong>输入样例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 1</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p><strong>输出样例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br></pre></td></tr></table></figure><h1 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h1><ol><li>看清题目意思，不同的数只要小于等于k个</li><li>连续不是指递增，不需要选取的数是者递增的</li><li>就是找k个不同的数，看他们如何组成相应的数</li></ol><h1 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断该数有没有出现过</span></span><br><span class="line">        <span class="type">int</span>[] cont = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1000010</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            arr[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//双指针判断l和r的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">1</span>,l=<span class="number">1</span>,max = <span class="number">0</span>,num = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>,end = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;k)&#123;</span><br><span class="line">                <span class="comment">//当窗口中已经有k个数的时候</span></span><br><span class="line">                <span class="comment">//当左端数只出现过一次后，直接去掉左端此数，继续向下一步判断</span></span><br><span class="line">                <span class="keyword">if</span>(cont[arr[l]] == <span class="number">1</span>)&#123;num--;&#125;</span><br><span class="line">                cont[arr[l]]--;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//若没有满足有k个数</span></span><br><span class="line">                <span class="keyword">if</span>(cont[arr[r]]==<span class="number">0</span>)&#123;num++;&#125;</span><br><span class="line">                cont[arr[r]]++;</span><br><span class="line">                <span class="keyword">if</span>(num&lt;=k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(max&lt;r-l)&#123;</span><br><span class="line">                        max = r-l;</span><br><span class="line">                        start = l;</span><br><span class="line">                        end = r;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(start+<span class="string">&quot; &quot;</span>+end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详细题目&quot;&gt;&lt;a href=&quot;#详细题目&quot; class=&quot;headerlink&quot; title=&quot;详细题目&quot;&gt;&lt;/a&gt;详细题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/4397/&quot;&gt;ACwing4</summary>
      
    
    
    
    
    <category term="双指针" scheme="http://baiyi-ing.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>POJ1011-Sticks</title>
    <link href="http://baiyi-ing.github.io/2022/04/01/POJ/POJ1011-Sticks/"/>
    <id>http://baiyi-ing.github.io/2022/04/01/POJ/POJ1011-Sticks/</id>
    <published>2022-03-31T20:03:34.000Z</published>
    <updated>2022-04-01T00:54:33.877Z</updated>
    
    <content type="html"><![CDATA[<p><strong>来源</strong></p><p><a href="https://www.acwing.com/problem/content/description/169/">ACwing167-木棒</a></p><p><a href="http://poj.org/problem?id=1011">POJ1011-Sticks</a></p><h1 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h1><p>本题被称为是剪枝神题之一，因为剪枝角度多达5种，且难以想象。常规的深搜，普通剪枝无法完成此题很有可能会导致超时。</p><h1 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h1><p>剪枝五种方法列举</p><hr><ol><li>从大到小排列数组（我们优先使用较长的短木棒，这样可以避免出现类似10&#x3D;2+3+5，及明明可以用一根却用了三根短木棒的情况）</li><li>木棒内部编号递增，帮助递归下标管理</li><li>在爆搜过程中，如果任意大木棒的<strong>第一个短木棍</strong>在进行了DFS爆搜后，显示这个短木棒<strong>不能匹配成指定长度len</strong>，但每条短木棍是一定要用的，所以只能说明这个len不满足题意，返回false</li><li>在爆搜过程中，如果任意大木棒的加了<strong>最后一块需要的短木</strong>棒在进行了DFS爆搜后，<strong>虽然当前小木棒加上后可以匹配一个完整的大木棒</strong>，但显示不能匹配，说明在接下来的爆搜过程中有<strong>则后面至少有一根大木棍不能用短木棒匹配成len</strong>，所以当前len依旧不满足题意，返回false</li><li>不能匹配后，则跳过所以相等的木棍长度，因为一样的长度同样通不过匹配</li></ol><h1 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h1><p><strong>java代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n,sum = <span class="number">0</span>,len;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] arr,visit;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//输入木棍个数，当n为0时结束</span></span><br><span class="line">            n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            visit = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="type">int</span> m;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                m = scanner.nextInt();</span><br><span class="line">                <span class="comment">//长度不大于50if(m&gt;50)&#123;continue;&#125;</span></span><br><span class="line">                arr[i] = m;</span><br><span class="line">                <span class="comment">//计算总和</span></span><br><span class="line">                sum+=arr[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//递增排列短木棍</span></span><br><span class="line">            Arrays.sort(arr);</span><br><span class="line">            <span class="comment">//二分递减排列短木棍</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>,r=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                arr[l] = arr[l]+arr[r];</span><br><span class="line">                arr[r] = arr[l] - arr[r];</span><br><span class="line">                arr[l] = arr[l] - arr[r];</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//逐个排列可能性,从最长的木棍长度开始</span></span><br><span class="line">            <span class="keyword">for</span> (len = arr[<span class="number">0</span>];len &lt;= sum/<span class="number">2</span>; len++) &#123;</span><br><span class="line">                <span class="comment">//当sum/len为整数时，说明有可能被拼凑出来,使用DFS判定</span></span><br><span class="line">                <span class="keyword">if</span>(sum%len == <span class="number">0</span>&amp;&amp;DFS(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)==<span class="literal">true</span>)&#123;</span><br><span class="line">                    System.out.println(len);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(len&gt;sum/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="comment">//只有一根木棍的情况下，最小长度为sum</span></span><br><span class="line">                System.out.println(sum);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> lon,<span class="type">int</span> index,<span class="type">int</span> num)</span>&#123;<span class="comment">//分别表示：当前木大棒长度，当前短木棒下标，当前大木棒个数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当大木棒个数乘当前目测长度等于总长时，返回ture</span></span><br><span class="line">        <span class="keyword">if</span>(num * len == sum)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当当前木棒长度为预测大棒长度时，说明已经找到一个木棒了,DFS寻找下一个木棒</span></span><br><span class="line">        <span class="keyword">if</span>(lon == len)&#123;<span class="keyword">return</span> DFS(<span class="number">0</span>,<span class="number">0</span>,num+<span class="number">1</span>);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//若当前的小木棍已经被用过,或当遍历的小木棍加上当前的木棍长度后大于len，则跳过继续</span></span><br><span class="line">            <span class="keyword">if</span>(visit[i] == <span class="number">0</span>&amp;&amp;lon+arr[i]&lt;=len)&#123;</span><br><span class="line"></span><br><span class="line">                visit[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(DFS(lon+arr[i],i+<span class="number">1</span>,num))&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">                visit[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果当前是要放入的第一根短木棒，就放入出错出现问题，则此len无法满足条件，返回false</span></span><br><span class="line">                <span class="comment">//说明在前面一轮的DFS中，没有短木棒能和这个初始短木棒组成长度为len的大木棒，但这个木棒是不能跳过的,我迟早要用这个长度的短木棒组成木棒的</span></span><br><span class="line">                <span class="comment">//因为就算跳过，在后面也要使用他和其它木棒组合，所以认定这个len不能被满足</span></span><br><span class="line">                <span class="keyword">if</span>(lon == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果是放入最后一节短木棒就放入出错，则此len无法满足条件，返回false</span></span><br><span class="line">                <span class="comment">//当发现前面的DFS并没有让lon+arr[i]=len这一看似可以通过的数据通过</span></span><br><span class="line">                <span class="comment">// 说明当前这一根大木棒虽然能凑成，但后面总有一根木棒他凑不出来</span></span><br><span class="line">                <span class="keyword">if</span>(lon+arr[i] == len)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//跳过所有相等的木棍,因为当前的木棒已经失败了，相同的长度同样会失败</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (j&lt; n &amp;&amp; arr[i] == arr[j])&#123;j++;&#125;</span><br><span class="line">                i = j-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若到了最后一个要拼凑的小木棍无法找到，则这种方法不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>c++代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">70</span>;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> len,n,sum;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> s,<span class="type">int</span> start)</span><span class="comment">//u表示多少个大木棒，s表示当前大木棒的长度,start表示木棒的下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u * len == sum) <span class="comment">//当前大木棒个数乘大木棒长度等于所有木棒总和，代表已经找到答案了，返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(s == len) <span class="comment">//已经找到一个小木棒了，小木棒个数加1，递归搜索下一个小木棒</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(u + <span class="number">1</span>, <span class="number">0</span> ,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = start; i &lt; n; i ++ )<span class="comment">//答案是个组合数，不是排列数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i] &amp;&amp; s + w[i] &lt;= len)<span class="comment">//可行性剪枝，当前木棒之前没被用过，或者当前大木棒总长度加上小木棒长度小于等于len</span></span><br><span class="line">        &#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(u, s + w[i], i + <span class="number">1</span>))<span class="comment">//判断当前木棒是否能放下</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//当前木棒能放到当前位置</span></span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果程序运行到这，代表当前小木棒不能放到这个位置</span></span><br><span class="line">            <span class="keyword">if</span>(s == <span class="number">0</span>) <span class="comment">//代表当前木棒为大木棒的第一个失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(s + w[i] == len)<span class="comment">//放到最后一个位置也失败了</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> j = i + <span class="number">1</span>;<span class="comment">//如果i失败了,那么长度跟i一样的棍子也一定失败</span></span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; w[i] == w[j]) j++;</span><br><span class="line">            i = j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//枚举完了还没有成功,就返回失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;w[i];</span><br><span class="line">            sum+=w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">sort</span>(w,w+n);</span><br><span class="line">        <span class="built_in">reverse</span>(w,w+n);<span class="comment">//从大到小排序，优化搜索顺序</span></span><br><span class="line">        </span><br><span class="line">        len = w[<span class="number">0</span>];<span class="comment">//从最大的那个木棒开始，因为不可能有一个大木棒比一个小木棒还小</span></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;=sum/<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum % len != <span class="number">0</span>)<span class="comment">//可行性剪枝，答案肯定是总和的约数</span></span><br><span class="line">            &#123;</span><br><span class="line">                len++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">                cout &lt;&lt; len &lt;&lt;endl;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="comment">//还没找到答案，所以答案只能是所有木棒长度总和</span></span><br><span class="line">            cout &lt;&lt; sum &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;来源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/description/169/&quot;&gt;ACwing167-木棒&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.</summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="剪枝" scheme="http://baiyi-ing.github.io/tags/%E5%89%AA%E6%9E%9D/"/>
    
  </entry>
  
  <entry>
    <title>hexo版本踩坑大赏</title>
    <link href="http://baiyi-ing.github.io/2022/03/31/hexo%E7%89%88%E6%9C%AC%E8%B8%A9%E5%9D%91%E5%A4%A7%E8%B5%8F/"/>
    <id>http://baiyi-ing.github.io/2022/03/31/hexo%E7%89%88%E6%9C%AC%E8%B8%A9%E5%9D%91%E5%A4%A7%E8%B5%8F/</id>
    <published>2022-03-31T05:48:23.000Z</published>
    <updated>2022-04-04T17:00:29.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="报错大赏"><a href="#报错大赏" class="headerlink" title="报错大赏"></a>报错大赏</h1><p><strong>FATAL YAMLException: Specified list of YAML types (or a single Type object) contains a non-Type object.</strong></p><p><img src="https://s2.loli.net/2022/03/29/OpZdiFMIQTzrJPW.png" alt="image.png"></p><p>然后笔者追根溯源发现是一个类型报错，笔者在想是不是因为自己在主题中添加更改了部分功能所导致的，然后再网上疯狂的翻找，发现并没有相关报错解析，后来加了一个大佬云集的群，他们说不是我的原因，<strong>是hexo与nodejs的版本配置原因</strong>，这一下打消了我的顾虑，结束了笔者的自我怀疑。</p><p>然后！笔者开始了<strong>不停换版本改路径，换版本改路径</strong>之旅</p><p>然后当版本换好了之后，笔者发现还是报了一样的错误！！！！</p><p>笔者继续了她的崩溃之旅┭┮﹏┭┮   ┭┮﹏┭┮   ┭┮﹏┭┮</p><p>然后她决定<strong>摆烂</strong>了！对的，你没有听错她<strong>摆烂</strong>了！<strong>摆烂</strong>了！</p><p>当然她的自我怀疑只可能是暂时的，她决定一切从0开始了</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>找到合适版本</p><p>node使用的是16.14.2版本    （这个建议到官网下载）<img src="https://s2.loli.net/2022/03/31/FDxbBQGNusfV9ng.png" alt="image-20220331110831581"></p><p>笔者这里安装的hexo是5.4.1版本</p><p><img src="C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20220331110507169.png" alt="image-20220331110507169"></p></li><li><p>迁移博客</p><p>为什么会有这一步呢？因为笔者决定开一个新的博客，后来发现我其实只要开一个新的博客文件，然后将以前的必要内容迁移过来就可以了，这个就是<a href="https://www.cnblogs.com/iHeling/p/14095937.html">最终解决方案</a>。</p><p>但是会有一个问题，你会发现hexo d指令无法使用，这个时候你要想办法找到自己曾经的.ssh文件，复制粘贴里面的内容到上传密钥GitHub中</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;报错大赏&quot;&gt;&lt;a href=&quot;#报错大赏&quot; class=&quot;headerlink&quot; title=&quot;报错大赏&quot;&gt;&lt;/a&gt;报错大赏&lt;/h1&gt;&lt;p&gt;&lt;st</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://baiyi-ing.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>POJ1699-DNA</title>
    <link href="http://baiyi-ing.github.io/2022/03/29/POJ/POJ1699-DNA/"/>
    <id>http://baiyi-ing.github.io/2022/03/29/POJ/POJ1699-DNA/</id>
    <published>2022-03-29T08:15:13.000Z</published>
    <updated>2022-03-29T09:02:36.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="POJ1699-DNA"><a href="#POJ1699-DNA" class="headerlink" title="POJ1699-DNA"></a><a href="http://poj.org/problem?id=1699">POJ1699-DNA</a></h1><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><ol><li><p>本题使用<strong>预处理路径增加长度</strong>的办法来解题</p><p>具体为：设立一个二维数组，来存取i，j字符顺序排列下</p><p>​                算出i，j的长度的重叠部分，然后再用<strong>j - 重叠部分</strong>算出所需要增加的长度</p></li><li><p>使用<strong>DFS</strong>来深度搜索最小值</p></li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> [][] arr;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String [] d;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] visit ;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> minLen,all=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//输入计算次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> n ;</span><br><span class="line">        <span class="keyword">while</span>(m--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//输入片段数量</span></span><br><span class="line">            n = scanner.nextInt();</span><br><span class="line">            <span class="comment">//创建二维数组保存两者之间的重叠区域字母数量</span></span><br><span class="line">             arr = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">             <span class="comment">//创建一维数组，保存每个字符串</span></span><br><span class="line">             d = <span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">             visit = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="comment">//输入DNA片段数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                d[i] = scanner.next();</span><br><span class="line">                all+=d[i].length();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//初始化arr中的数据，列举出每一个数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//当数据自我重叠时跳过</span></span><br><span class="line">                    <span class="keyword">if</span>(i == j)&#123;</span><br><span class="line">                        <span class="comment">//System.out.print(arr[i][j]+ &quot; &quot;)</span></span><br><span class="line">                        ;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                    <span class="comment">//初始化片段值增加值</span></span><br><span class="line">                    add(i,j);</span><br><span class="line">                    <span class="comment">//System.out.print( arr[i][j]+ &quot; &quot;);</span></span><br><span class="line">                &#125;</span><br><span class="line">               <span class="comment">// System.out.println();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//初始化最优解</span></span><br><span class="line">            minLen = all+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//使用DFS爆搜剪枝</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                visit[i] = <span class="number">1</span>;</span><br><span class="line">                DFS(n,<span class="number">1</span>,d[i].length(),i);</span><br><span class="line">                visit[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(minLen);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化压缩数据函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="comment">//选取较小长度为当前的长度限制</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.min(d[i].length(),d[j].length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> len; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(;h&lt;k;h++)&#123;</span><br><span class="line">                <span class="comment">//当匹配</span></span><br><span class="line">                <span class="keyword">if</span> (d[i].charAt(d[i].length()-k+h)!=d[j].charAt(h))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(h == k)&#123;</span><br><span class="line">                arr[i][j] = d[j].length()-k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//爆搜剪枝计算最短长度,n为总个数，m为使用个数，len为当前长度,now为上一个的下标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> len,<span class="type">int</span> now)</span>&#123;</span><br><span class="line">        <span class="comment">//当当前值已经大于等于已经得到的最小值，则进行剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(len&gt;minLen)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(n == m)&#123;</span><br><span class="line">            minLen =Math.min(len,minLen);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(visit[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                visit[i] = <span class="number">1</span>;</span><br><span class="line">                DFS(n,m+<span class="number">1</span>,len+arr[now][i],i);</span><br><span class="line">                visit[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;POJ1699-DNA&quot;&gt;&lt;a href=&quot;#POJ1699-DNA&quot; class=&quot;headerlink&quot; title=&quot;POJ1699-DNA&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=1699&quot;&gt;POJ1699-DNA&lt;</summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="压缩" scheme="http://baiyi-ing.github.io/tags/%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>牛客小白月赛-C英文作文</title>
    <link href="http://baiyi-ing.github.io/2022/03/25/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B-C%E8%8B%B1%E6%96%87/"/>
    <id>http://baiyi-ing.github.io/2022/03/25/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B-C%E8%8B%B1%E6%96%87/</id>
    <published>2022-03-25T12:54:24.000Z</published>
    <updated>2022-03-29T04:49:52.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英文作文"><a href="#英文作文" class="headerlink" title="英文作文"></a><a href="https://ac.nowcoder.com/acm/contest/11223/C">英文作文</a></h1><h2 id="详细题目"><a href="#详细题目" class="headerlink" title="详细题目"></a>详细题目</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/11223/C">https://ac.nowcoder.com/acm/contest/11223/C</a><br>来源：牛客网</p><p>时间限制：C&#x2F;C++ 1秒，其他语言2秒<br>            空间限制：C&#x2F;C++ 262144K，其他语言524288K<br>             64bit IO Format: %lld</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>  在写英语作文的时候，两个相同单词靠的太近肯定不好。现在 ZHR 给了你一段nnn个单词的英文，问你有多少对相同单词中间间隔的单词数小于等于kkk 。 </p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一行两个整数，为n和k 。</span><br><span class="line"></span><br><span class="line">第二行n个由仅小写字母组成的单词。每个单词长度小于等于10 。</span><br><span class="line">1≤k≤n≤105</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一行一个正整数，表示有多少对单词中间间隔的单词数小于等于kkk 。</span><br></pre></td></tr></table></figure><p> 示例1                        </p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11 2</span><br><span class="line">i love you you love mi mixue ice cream and tea</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有 you 和 love 两个单词间隔的单词数小于等于222</span><br></pre></td></tr></table></figure><p> 示例2                        </p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 2</span><br><span class="line">a a a a a a a a a a</span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><ol><li>本题使用暴力解法超时，笔者因为暴力而罚时-3</li><li>本题宜采取<strong>哈希表+滑动窗口</strong>的模式，来计算合法范围内的相同对数</li><li>使用<strong>res+&#x3D;此字符串出现次数-1</strong>的方式，来计算此字符在范围内的出现次数</li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt;q;</span><br><span class="line">string s[N];</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    k+=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;s[i];</span><br><span class="line">    LL res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=k) </span><br><span class="line">        &#123;</span><br><span class="line">            q[s[i]]++;</span><br><span class="line">            <span class="keyword">if</span>(q[s[i]]&gt;<span class="number">1</span>) res+=q[s[i]]<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当余下的长度，或本来的长度大于k，使用滑动窗口算法</span></span><br><span class="line">            <span class="comment">//记录开头的数字s[i-k]个数减一在窗口数组中，相当于向右滑动的初始</span></span><br><span class="line">            q[s[i-k]]--;</span><br><span class="line">            <span class="comment">//记录结尾的数字s[i]个数加一在窗口数组中，相当于向右滑动结尾</span></span><br><span class="line">            q[s[i]]++;</span><br><span class="line">            <span class="comment">//s[i]的数目大于1时，则窗口范围内数组对数个数为s[i]的数目减一</span></span><br><span class="line">            <span class="keyword">if</span>(q[s[i]]&gt;<span class="number">1</span>) res+=q[s[i]]<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;英文作文&quot;&gt;&lt;a href=&quot;#英文作文&quot; class=&quot;headerlink&quot; title=&quot;英文作文&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/11223/C&quot;&gt;英文作文&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    
    <category term="滑动窗口" scheme="http://baiyi-ing.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
    <category term="哈希表" scheme="http://baiyi-ing.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>ACwing3370-牛年</title>
    <link href="http://baiyi-ing.github.io/2022/03/18/ACwing/ACwing3370-%E7%89%9B%E5%B9%B4/"/>
    <id>http://baiyi-ing.github.io/2022/03/18/ACwing/ACwing3370-%E7%89%9B%E5%B9%B4/</id>
    <published>2022-03-18T10:10:24.000Z</published>
    <updated>2022-03-21T20:27:47.419Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/description/3373/">acwing3370. 牛年</a></p><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>Farmer John 的奶牛们得知最近正在庆祝牛年的到来时十分兴奋。</p><p>牛年总是奶牛们的最爱。</p><p>我们知道，中国历法中每一年所对应的生肖遵循 12年的周期：<code>Ox, Tiger, Rabbit, Dragon, Snake, Horse, Goat, Monkey, Rooster, Dog, Pig, Rat</code>（牛、虎、兔、龙、蛇、马、羊、猴、鸡、狗、猪、鼠），然后回到牛。</p><p>奶牛 Bessie 自豪地说她是在许多年前的一个牛年出生的。</p><p>她的朋友 Elsie 想要知道她与 Bessie 出生相差多少年，并且希望你能够通过查看农场上若干奶牛出生年份之间的关系来帮助她推算。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个整数 NN。</p><p>以下 N 行<strong>每行包含一个 8 个单词的短语</strong>，指定了两头奶牛的出生年份之间的关系，格式为 <code>Mildred born in previous Dragon year from Bessie</code>（Mildred 在 Bessie 出生的前一个龙年出生），或 <code>Mildred born in next Dragon year from Bessie</code>（Mildred 在 Bessie 出生的后一个龙年出生）。</p><p>最后一个单词是农场上某一头奶牛的名字，为 “Bessie” 或一头已经在之前的输入中出现过的奶牛。</p><p>第一个单词是农场上某一头奶牛的名字，不为 “Bessie” 且未在之前的输入中出现过。</p><p>所有的奶牛名字不超过 10 个字符，且仅包含字符 a..z 或 A..Z。</p><p>第 5 个单词是上述十二生肖之一。</p><p>第 4 个单词是 <code>previous</code>（之前）或 <code>next</code>（之后）之一。</p><p>例如，如果短语为 <code>Mildred born in previous Dragon year from Bessie</code>，则 Mildred 的出生年份为最为接近且严格处于 Bessie 的出生年份之前（不等于）的龙年。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出 Bessie 和 Elsie 的出生年份之间相差的年数。输入保证可以通过给定的信息求出结果。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤N≤1001≤N≤100</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">Mildred born in previous Dragon year from Bessie</span><br><span class="line">Gretta born in previous Monkey year from Mildred</span><br><span class="line">Elsie born in next Ox year from Gretta</span><br><span class="line">Paulina born in next Dog year from Bessie</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>在以上的输入中，</p><ul><li>Elsie 在 Bessie 之前 12 年出生。</li><li>Mildred 在 Bessie 之前 9 年出生。</li><li>Gretta 在 Bessie 之前 17 年出生。</li><li>Paulina 在 Bessie 之后 9 年出生。</li></ul><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><p>本题笔者采用哈希表来存储</p><p>1） 生肖名称与生肖顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存入每个年份，并给每个年份编号</span></span><br><span class="line">       Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;Ox&quot;</span>, <span class="number">0</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Tiger&quot;</span>, <span class="number">1</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Rabbit&quot;</span>, <span class="number">2</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Dragon&quot;</span>, <span class="number">3</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Snake&quot;</span>, <span class="number">4</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Horse&quot;</span>, <span class="number">5</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Goat&quot;</span>, <span class="number">6</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Monkey&quot;</span>, <span class="number">7</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Rooster&quot;</span>, <span class="number">8</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Dog&quot;</span>, <span class="number">9</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Pig&quot;</span>, <span class="number">10</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Rat&quot;</span>, <span class="number">11</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>每个人的<strong>名字</strong>与相对于Bessie的<strong>年纪</strong>（Bessie默认为0岁）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以Bessie的年龄为坐标轴中点，为0岁</span></span><br><span class="line">       Map&lt;String,Integer&gt; ages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       ages.put(<span class="string">&quot;Bessie&quot;</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ages.put(s[i][<span class="number">0</span>],age);</span><br></pre></td></tr></table></figure><ol start="3"><li>也可以利用哈希表来存储每个人的<strong>名字与生肖</strong>，但这里笔者利用已经<strong>提前存好的年纪与生肖编号</strong>来计算生肖</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用后一个人的年纪，定位后一个人的生肖下标</span></span><br><span class="line">           year = ages.get(s[i][<span class="number">7</span>])%<span class="number">12</span>;</span><br><span class="line">           <span class="keyword">if</span>(year &lt; <span class="number">0</span>)&#123;year += <span class="number">12</span>;&#125;</span><br><span class="line">           <span class="comment">//后一个人 - 前一个人 的差</span></span><br><span class="line">           age = year -  map.get(s[i][<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//存入每个年份，并给每个年份编号</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;Ox&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Tiger&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Rabbit&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Dragon&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Snake&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Horse&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Goat&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Monkey&quot;</span>, <span class="number">7</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Rooster&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Dog&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Pig&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Rat&quot;</span>, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="comment">//以Bessie的年龄为坐标轴中点，为0岁</span></span><br><span class="line">        Map&lt;String,Integer&gt; ages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        ages.put(<span class="string">&quot;Bessie&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//逐个输入，利用后一个人的生肖与年纪</span></span><br><span class="line">        <span class="comment">// 与前一个人的生肖判断前一个人的年纪（相对于Bessie的）</span></span><br><span class="line">        String[][] s = <span class="keyword">new</span> <span class="title class_">String</span>[n][<span class="number">8</span>];<span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>,year;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                s[i][j] = scanner.next();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//利用后一个人的年纪，定位后一个人的生肖下标</span></span><br><span class="line">            year = ages.get(s[i][<span class="number">7</span>])%<span class="number">12</span>;</span><br><span class="line">            <span class="keyword">if</span>(year &lt; <span class="number">0</span>)&#123;year += <span class="number">12</span>;&#125;</span><br><span class="line">            <span class="comment">//后一个人 - 前一个人 的差</span></span><br><span class="line">            age = year -  map.get(s[i][<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s[i][<span class="number">3</span>].equals(<span class="string">&quot;previous&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//后一个人，比前一个人小，当生肖差大于0时，两人年纪差为age</span></span><br><span class="line">                <span class="keyword">if</span>(age&gt;<span class="number">0</span>)&#123;age = ages.get(s[i][<span class="number">7</span>])-age;&#125;</span><br><span class="line">                <span class="comment">//当生肖差，小于等于0时，说明两人年纪差为（12+age）</span></span><br><span class="line">                <span class="keyword">else</span> &#123; age = ages.get(s[i][<span class="number">7</span>]) - <span class="number">12</span> - age;&#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//后一个人，比前一个人大，当生肖差大于等于0时，两人年纪差为（12-age）</span></span><br><span class="line">                 <span class="keyword">if</span>(age&gt;=<span class="number">0</span>)&#123;age = ages.get(s[i][<span class="number">7</span>]) + <span class="number">12</span> - age;&#125;</span><br><span class="line">                 <span class="comment">//当生肖差，小于0时，说明两人年纪差为age</span></span><br><span class="line">                 <span class="keyword">else</span> &#123; age = ages.get(s[i][<span class="number">7</span>])-age ;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//System.out.println(s[i][0]+&quot; &quot;+age);</span></span><br><span class="line">            ages.put(s[i][<span class="number">0</span>],age);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Math.abs(ages.get(<span class="string">&quot;Elsie&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/description/3373/&quot;&gt;acwing3370. 牛年&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="哈希表" scheme="http://baiyi-ing.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>力扣2044-统计按位或能得到最大值的子集数目</title>
    <link href="http://baiyi-ing.github.io/2022/03/15/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A32044-%E7%BB%9F%E8%AE%A1%E6%8C%89%E4%BD%8D%E6%88%96%E8%83%BD%E5%BE%97%E5%88%B0%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84%E5%AD%90%E9%9B%86%E6%95%B0%E7%9B%AE/"/>
    <id>http://baiyi-ing.github.io/2022/03/15/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A32044-%E7%BB%9F%E8%AE%A1%E6%8C%89%E4%BD%8D%E6%88%96%E8%83%BD%E5%BE%97%E5%88%B0%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84%E5%AD%90%E9%9B%86%E6%95%B0%E7%9B%AE/</id>
    <published>2022-03-15T12:10:11.000Z</published>
    <updated>2022-03-21T20:27:47.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><strong>难度中等</strong></p><p>给你一个整数数组 <code>nums</code> ，请你找出 <code>nums</code> 子集 <strong>按位或</strong> 可能得到的 <strong>最大值</strong> ，并返回按位或能得到最大值的 <strong>不同非空子集的数目</strong> 。</p><p>如果数组 <code>a</code> 可以由数组 <code>b</code> 删除一些元素（或不删除）得到，则认为数组 <code>a</code> 是数组 <code>b</code> 的一个 <strong>子集</strong> 。如果选中的元素下标位置不一样，则认为两个子集 <strong>不同</strong> 。</p><p>对数组 <code>a</code> 执行 <strong>按位或</strong> ，结果等于 <code>a[0] **OR** a[1] **OR** ... **OR** a[a.length - 1]</code>（下标从 <strong>0</strong> 开始）。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,1]</span><br><span class="line">输出：2</span><br><span class="line">解释：子集按位或能得到的最大值是 3 。有 2 个子集按位或可以得到 3 ：</span><br><span class="line">- [3]</span><br><span class="line">- [3,1]</span><br></pre></td></tr></table></figure><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,2]</span><br><span class="line">输出：7</span><br><span class="line">解释：[2,2,2] 的所有非空子集的按位或都可以得到 2 。总共有 23 - 1 = 7 个子集。</span><br></pre></td></tr></table></figure><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><strong>示例 3：</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1,5]</span><br><span class="line">输出：6</span><br><span class="line">解释：子集按位或可能的最大值是 7 。有 6 个子集按位或可以得到 7 ：</span><br><span class="line">- [3,5]</span><br><span class="line">- [3,1,5]</span><br><span class="line">- [3,2,5]</span><br><span class="line">- [3,2,1,5]</span><br><span class="line">- [2,5]</span><br><span class="line">- [2,1,5]</span><br></pre></td></tr></table></figure><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a><strong>提示：</strong></h2><ul><li><code>1 &lt;= nums.length &lt;= 16</code></li><li><code>1 &lt;= nums[i] &lt;= 105</code></li></ul><hr><h1 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h1><ol><li>找到最大异或数，<strong>直接全部异或</strong>方可找到</li><li>问题规模不变，<strong>问题处理情况却只有两种</strong>，一种是有当前数，一种是无当前数，我们利用DFS暴力搜索其可能性</li></ol><h1 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countMaxOrSubsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//计算出最大的异或值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num:nums) &#123;</span><br><span class="line">            max |= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进入DFS暴搜</span></span><br><span class="line">        DFS(<span class="number">0</span>,<span class="number">0</span>,nums,max);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n,<span class="type">int</span>[] nums,<span class="type">int</span> max)</span>&#123;</span><br><span class="line">         <span class="comment">//m表示当前遍历到的数的个数，n表示当前的数值</span></span><br><span class="line">        <span class="keyword">if</span>(m == nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n == max)&#123;ans++;&#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//异或当前值</span></span><br><span class="line">        DFS(m+<span class="number">1</span>,n|nums[m],nums,max);</span><br><span class="line">        <span class="comment">//不异或当前值</span></span><br><span class="line">        DFS(m+<span class="number">1</span>,n,nums,max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="来源与结果"><a href="#来源与结果" class="headerlink" title="来源与结果"></a>来源与结果</h1><p><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/">2044. 统计按位或能得到最大值的子集数目</a></p><p><img src="https://s2.loli.net/2022/03/15/XZPFxiIhGm9UbWg.png" alt="image-20220315203028578"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;难度中等&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，请你找出 </summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>ACwing2060-奶牛选美</title>
    <link href="http://baiyi-ing.github.io/2022/03/14/ACwing/ACwing2060-%E5%A5%B6%E7%89%9B%E9%80%89%E7%BE%8E/"/>
    <id>http://baiyi-ing.github.io/2022/03/14/ACwing/ACwing2060-%E5%A5%B6%E7%89%9B%E9%80%89%E7%BE%8E/</id>
    <published>2022-03-14T12:49:34.000Z</published>
    <updated>2022-03-21T20:27:47.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACwing2060-奶牛选美"><a href="#ACwing2060-奶牛选美" class="headerlink" title="ACwing2060-奶牛选美"></a><a href="https://www.acwing.com/problem/content/2062/">ACwing2060-奶牛选美</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>听说最近两斑点的奶牛最受欢迎，约翰立即购进了一批两斑点牛。</p><p>不幸的是，时尚潮流往往变化很快，当前最受欢迎的牛变成了一斑点牛。</p><p>约翰希望通过给每头奶牛涂色，使得它们身上的两个斑点能够合为一个斑点，让它们能够更加时尚。</p><p>牛皮可用一个 N×MN×M 的字符矩阵来表示，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">................</span><br><span class="line">..XXXX....XXX...</span><br><span class="line">...XXXX....XX...</span><br><span class="line">.XXXX......XXX..</span><br><span class="line">........XXXXX...</span><br><span class="line">.........XXX....</span><br></pre></td></tr></table></figure><p>其中，XX 表示斑点部分。</p><p>如果两个 XX 在垂直或水平方向上相邻（对角相邻不算在内），则它们属于同一个斑点，由此看出上图中恰好有两个斑点。</p><p>约翰牛群里<strong>所有的牛都有两个斑点</strong>。</p><p>约翰希望通过使用油漆给奶牛尽可能少的区域内涂色，将两个斑点合为一个。</p><p>在上面的例子中，他只需要给三个 .. 区域内涂色即可（新涂色区域用 ∗ 表示）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">................</span><br><span class="line">..XXXX....XXX...</span><br><span class="line">...XXXX*...XX...</span><br><span class="line">.XXXX..**..XXX..</span><br><span class="line">........XXXXX...</span><br><span class="line">.........XXX....</span><br></pre></td></tr></table></figure><p>请帮助约翰确定，为了使两个斑点合为一个，他需要涂色区域的最少数量。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个整数 N 和 M。</p><p>接下来 N 行，每行包含一个长度为 M 的由 X 和 .. 构成的字符串，用来表示描述牛皮图案的字符矩阵。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出需要涂色区域的最少数量。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤N,M≤50</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 16</span><br><span class="line">................</span><br><span class="line">..XXXX....XXX...</span><br><span class="line">...XXXX....XX...</span><br><span class="line">.XXXX......XXX..</span><br><span class="line">........XXXXX...</span><br><span class="line">.........XXX....</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><h3 id="1-统计连通块的位置"><a href="#1-统计连通块的位置" class="headerlink" title="1. 统计连通块的位置"></a>1. 统计连通块的位置</h3><p>我们使用<a href="https://blog.csdn.net/qq_41759198/article/details/81501764?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-81501764.pc_agg_new_rank&utm_term=dfs%E7%90%86%E8%A7%A3%E4%B8%8D%E4%BA%86&spm=1000.2123.3001.4430">深度优先搜索算法</a>来，逐个统计每个连通块中的每个点的位置</p><h3 id="2-计算连通块的距离"><a href="#2-计算连通块的距离" class="headerlink" title="2. 计算连通块的距离"></a>2. 计算连通块的距离</h3><p>我们使用<a href="https://baike.baidu.com/item/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB/743092">曼哈顿距离</a>计算法，来找出让两联通块链接的最小路径值，为<strong>d(x,y)-1</strong></p><p><img src="https://s2.loli.net/2022/03/14/49CwLjbmI7N8GnO.png" alt="image.png"></p><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    static int N = 100;</span><br><span class="line">    static char[][] arr = new char[N][N];</span><br><span class="line">    static int k = 0,n,m;</span><br><span class="line">    static List&lt;Integer&gt;[] lists = new List[2];</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">         n = scanner.nextInt();</span><br><span class="line">         m = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        String s ;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">           s  = scanner.next();</span><br><span class="line">            for (int j = 0; j &lt; m; j++) &#123;</span><br><span class="line">                arr[i][j] = s.charAt(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //使用DFS记录下标</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; m; j++) &#123;</span><br><span class="line">                if(arr[i][j] == &#x27;X&#x27;)&#123;</span><br><span class="line">                    lists[k] = new ArrayList&lt;&gt;();</span><br><span class="line">                    DFS(i,j);</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //使用曼哈顿距离法计算</span><br><span class="line">        int min = Integer.MAX_VALUE,dis;</span><br><span class="line">        point p1 = new point();point p2 = new point();</span><br><span class="line">        for (int i = 0; i &lt; lists[0].size(); i++) &#123;</span><br><span class="line">            p1.x = lists[0].get(i)/1000;</span><br><span class="line">            p1.y = lists[0].get(i)%1000;</span><br><span class="line">            for (int j = 0; j &lt; lists[1].size(); j++) &#123;</span><br><span class="line">                p2.x = lists[1].get(j)/1000;</span><br><span class="line">                p2.y = lists[1].get(j)%1000;</span><br><span class="line">                dis = Math.abs(p1.x-p2.x)+Math.abs(p1.y-p2.y)-1;</span><br><span class="line">                min = Math.min(dis,min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //方向向量</span><br><span class="line">    static int[] dx = &#123;0,0,1,-1&#125;;</span><br><span class="line">    static int[] dy = &#123;1,-1,0,0&#125;;</span><br><span class="line">    static public void DFS(int x,int y)&#123;</span><br><span class="line">       //先将该店设置为已经标记</span><br><span class="line">        arr[x][y] =&#x27;.&#x27;;</span><br><span class="line">        lists[k].add(x*1000+y);</span><br><span class="line">       //向四周遍历</span><br><span class="line">        for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">            int a = dx[i]+x;</span><br><span class="line">            int b = dy[i]+y;</span><br><span class="line">            if(a&gt;=0&amp;&amp;b&gt;=0&amp;&amp;a&lt;n&amp;&amp;b&lt;m&amp;&amp;arr[a][b] ==&#x27;X&#x27;)&#123;</span><br><span class="line">                DFS(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class point&#123;</span><br><span class="line">    int x,y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ACwing2060-奶牛选美&quot;&gt;&lt;a href=&quot;#ACwing2060-奶牛选美&quot; class=&quot;headerlink&quot; title=&quot;ACwing2060-奶牛选美&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/c</summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="曼哈顿距离" scheme="http://baiyi-ing.github.io/tags/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>N皇后</title>
    <link href="http://baiyi-ing.github.io/2022/03/14/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/N%E7%9A%87%E5%90%8E/"/>
    <id>http://baiyi-ing.github.io/2022/03/14/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/N%E7%9A%87%E5%90%8E/</id>
    <published>2022-03-14T11:11:01.000Z</published>
    <updated>2022-03-21T20:27:47.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="N皇后"><a href="#N皇后" class="headerlink" title="N皇后"></a>N皇后</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><h4 id="力扣-51N-皇后"><a href="#力扣-51N-皇后" class="headerlink" title="力扣-51N 皇后"></a><a href="https://leetcode-cn.com/problems/n-queens/">力扣-51N 皇后</a></h4><h4 id="AcWing-843-n-皇后问题"><a href="#AcWing-843-n-皇后问题" class="headerlink" title="AcWing 843. n-皇后问题"></a><strong><a href="https://www.acwing.com/problem/content/845/">AcWing 843. n-皇后问题</a></strong></h4><h2 id="重点信息"><a href="#重点信息" class="headerlink" title="重点信息"></a>重点信息</h2><ol><li>皇后的个数、行数、列数总数相同，斜线总数为2n-1</li><li>所有皇后不能在同一行同一列同一斜线</li><li>要遍历出所有的可行摆放情况</li></ol><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><ol><li>可以设置三个一维boolean数组，分别用来封锁竖行，与两斜行。而横排则在传输中变换</li><li>使用DFS（<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224976?fromtitle=DFS&fromid=5055&fr=aladdin">深度优先搜索</a>），回溯遍历</li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><p><strong>力扣版本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">char</span>[][] ch; </span><br><span class="line">    List&lt;List&lt;String&gt;&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//三个bool函数分别表示列，正斜线和反斜线（共有2n-1条斜线）</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span>[] col = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="type">boolean</span>[] d = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">30</span>];</span><br><span class="line">    <span class="type">boolean</span>[] rd = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">30</span>];</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//初始化队列</span></span><br><span class="line">         ch = <span class="keyword">new</span> <span class="title class_">char</span>[n ][n ];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                ch[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//深度优先搜索</span></span><br><span class="line">        DFS(<span class="number">0</span>,n);</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//当搜索数字等于n时，则搜索完毕可以存入</span></span><br><span class="line">        <span class="keyword">if</span> (m==n)&#123;</span><br><span class="line">            <span class="comment">//将数据存入队列中</span></span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n ; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    s+=ch[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            lists.add(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">          <span class="comment">//遍历每行，m可以表示当前所在行数，i可以表示当前所在列数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n ; i++) &#123;</span><br><span class="line">            <span class="comment">//斜线的x与y的和与差总是固定的</span></span><br><span class="line">            <span class="comment">//则利用x+y判断正斜线是否被用，y-x判断反斜线是否被用加上N是防止溢出</span></span><br><span class="line">               <span class="keyword">if</span>(col[i] == <span class="literal">false</span> &amp;&amp; d[i+m] == <span class="literal">false</span> &amp;&amp; rd[n+i-m] == <span class="literal">false</span>)&#123;</span><br><span class="line">                   <span class="comment">//将此点变成皇后Q</span></span><br><span class="line">                   ch[m][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                   <span class="comment">//将此点的竖线，两斜线封锁</span></span><br><span class="line">                   col[i]=d[i+m]=rd[n+i-m]=<span class="literal">true</span>;</span><br><span class="line">                   <span class="comment">//继续向下一排遍历</span></span><br><span class="line">                   DFS(m+<span class="number">1</span>,n);</span><br><span class="line">                   <span class="comment">//遍历回溯后，回到曾经状态</span></span><br><span class="line">                   col[i]=d[i+m]=rd[n+i-m]=<span class="literal">false</span>;</span><br><span class="line">                   ch[m][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>acwing版本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//acwing版本</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**DFS求解n皇后的求解方法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">read</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="comment">//分别记录列，对角线与反对角线</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] col = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] dl = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] rdl = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">char</span>[][] arr = <span class="keyword">new</span> <span class="title class_">char</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        n = Integer.valueOf(read.readLine());</span><br><span class="line">        String temp ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                arr[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        DFS(<span class="number">0</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">DFS</span> <span class="params">(<span class="type">int</span> m)</span>&#123;</span><br><span class="line">        <span class="comment">//当n皇后排满,m是个数也是行数</span></span><br><span class="line">        <span class="keyword">if</span>(m==n)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                    System.out.println(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//若果m列，对角线，反对角线未被使用</span></span><br><span class="line">            <span class="comment">//判断x+y是否被用，y-x是否被用加上N是防止溢出</span></span><br><span class="line">            <span class="comment">// 因为两者相加与相减的大小是固定的</span></span><br><span class="line">            <span class="keyword">if</span>(!col[i] &amp;&amp; !dl[i+m] &amp;&amp; !rdl[n+i-m])&#123;</span><br><span class="line">                <span class="comment">//若未被占用则记录使用</span></span><br><span class="line">                col[i] = dl[i+m] = rdl[i-m+n-<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//将此点标记为Q</span></span><br><span class="line">                arr[m][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                DFS(m+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//回到曾经状态</span></span><br><span class="line">                col[i] = dl[i+m] = rdl[i-m+n-<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">                arr[m][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;N皇后&quot;&gt;&lt;a href=&quot;#N皇后&quot; class=&quot;headerlink&quot; title=&quot;N皇后&quot;&gt;&lt;/a&gt;N皇后&lt;/h1&gt;&lt;h2 id=&quot;题目来源&quot;&gt;&lt;a href=&quot;#题目来源&quot; class=&quot;headerlink&quot; title=&quot;题目来源&quot;&gt;&lt;/a&gt;题目来</summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>力扣-599两个列表的最小索引总和</title>
    <link href="http://baiyi-ing.github.io/2022/03/14/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3-599%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/"/>
    <id>http://baiyi-ing.github.io/2022/03/14/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3-599%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/</id>
    <published>2022-03-14T09:35:27.000Z</published>
    <updated>2022-03-21T20:27:47.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="599-两个列表的最小索引总和"><a href="#599-两个列表的最小索引总和" class="headerlink" title="599. 两个列表的最小索引总和"></a><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/">599. 两个列表的最小索引总和</a></h1><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>假设 Andy 和 Doris 想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设答案总是存在。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: list1 = [&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]，list2 = [&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]</span><br><span class="line">输出: [&quot;Shogun&quot;]</span><br><span class="line">解释: 他们唯一共同喜爱的餐厅是“Shogun”。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入:list1 = [&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]，list2 = [&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]</span><br><span class="line">输出: [&quot;Shogun&quot;]</span><br><span class="line">解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= list1.length, list2.length &lt;= 1000</code></li><li><code>1 &lt;= list1[i].length, list2[i].length &lt;= 30</code> </li><li><code>list1[i]</code> 和 <code>list2[i]</code> 由空格 <code>&#39; &#39;</code> 和英文字母组成。</li><li><code>list1</code> 的所有字符串都是 <strong>唯一</strong> 的。</li><li><code>list2</code> 中的所有字符串都是 <strong>唯一</strong> 的</li></ul><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><ol><li>首先我们需要找到他们所共同喜欢的餐厅我们利用HashMap进行存储与匹配</li><li>我们找到最小索引和是多少，我们利用以前HashMap存储其下标值，进行帮助比较，利用队列存储符合餐厅与清除不符合餐厅</li><li>确定符合最小索引总和的餐厅数目（利用队列的长度求索）</li><li>返回将队列转化为数组返回</li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String[] findRestaurant(String[] list1, String[] list2) &#123;</span><br><span class="line">    Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">            map.put(list1[i],i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int index = Integer.MAX_VALUE;</span><br><span class="line">        Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; list2.length; i++) &#123;</span><br><span class="line">            if (map.containsKey(list2[i]))&#123;</span><br><span class="line">                //使用钥匙找到值</span><br><span class="line">                int b = map.get(list2[i]);</span><br><span class="line">                if(b+i&lt;index)&#123;</span><br><span class="line">                 //如果搜索和小于，原来搜索和最小值，则清空列表重新计算</span><br><span class="line">                    queue.clear();</span><br><span class="line">                    queue.add(list2[i]);</span><br><span class="line">                    index = b+i;</span><br><span class="line">                &#125;else if(b+i==index)&#123;</span><br><span class="line">                  //若搜索和与最小值相等，则加入最小搜索值队列</span><br><span class="line">                    queue.add(list2[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return queue.toArray(new String[queue.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;599-两个列表的最小索引总和&quot;&gt;&lt;a href=&quot;#599-两个列表的最小索引总和&quot; class=&quot;headerlink&quot; title=&quot;599. 两个列表的最小索引总和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problem</summary>
      
    
    
    
    
    <category term="哈希表" scheme="http://baiyi-ing.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>差分</title>
    <link href="http://baiyi-ing.github.io/2022/03/14/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E5%B7%AE%E5%88%86/"/>
    <id>http://baiyi-ing.github.io/2022/03/14/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E5%B7%AE%E5%88%86/</id>
    <published>2022-03-14T02:55:02.000Z</published>
    <updated>2022-03-21T20:27:47.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a><a href="https://www.acwing.com/problem/content/799/">差分</a></h1><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><p>输入一个长度为 nn 的整数序列。</p><p>接下来输入 mm 个操作，每个操作包含三个整数 l,r,cl,r,c，表示将序列中 [l,r][l,r] 之间的每个数加上 cc。</p><p>请你输出进行完所有操作后的序列。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个整数 nn 和 mm。</p><p>第二行包含 nn 个整数，表示整数序列。</p><p>接下来 mm 行，每行包含三个整数 l，r，cl，r，c，表示一个操作。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>共一行，包含 nn 个整数，表示最终序列。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤n,m≤1000001≤n,m≤100000,<br>1≤l≤r≤n1≤l≤r≤n,<br>−1000≤c≤1000−1000≤c≤1000,<br>−1000≤整数序列中元素的值≤1000−1000≤整数序列中元素的值≤1000</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">1 2 2 1 2 1</span><br><span class="line">1 3 1</span><br><span class="line">3 5 1</span><br><span class="line">1 6 1</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 5 3 4 2</span><br></pre></td></tr></table></figure><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><ol><li><p>差分可以用于计算其中任意一段数组的加减，并且每次加减时间控制在O(1)</p></li><li><p>差分是前缀和的逆运算（<a href="https://baiyi-ing.github.io/2022/03/07/Java%E5%9F%BA%E7%A1%80/%E4%B8%80%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/">前缀和</a>是预先知道a[n],后计算S[n],以达到可以在O(1)时间段内，计算任意一段数据的和的目的）</p></li><li><p>前置条件：假设原来给定数组为S[n]（或自己计算出S[n]）,则计算差分数组可以为**a[n] &#x3D; S[n]-S[n-1]**。</p></li><li><p>计算基础：计算让原来的素组任意一段加减一个常数c，相当于<strong>S[l~r]-c</strong></p></li><li><p>核心计算：要知道某一段<strong>前缀和数据S[l~r]突然全部加了相同的一个数</strong>，可以被看做<strong>a[n]中的一个数据加了c而导致的连锁效应</strong>，而且S[0 ~ l-1]，S[r+1<del>n]两段数据值没有改变，那我们就可以把**S[l</del>r]+c**这个过程简化为 <strong>a[l]+c， a[r+1]-c</strong>，这样复杂度就瞬间见下降。</p></li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**一维差分</span></span><br><span class="line"><span class="comment"> * 给某一段加上数值*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入si</span></span><br><span class="line">        <span class="type">int</span>[] si = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            si[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算ai = s[i]-s[i-1]</span></span><br><span class="line">        <span class="type">int</span>[] ai = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            ai[i] = si[i] -si[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由题可知s[l~r]+c = c+bl+......+br不影响s[l]之前</span></span><br><span class="line">        <span class="comment">//为了不影响s[r]之后的前缀和数值，我们将b[r+1]-c</span></span><br><span class="line">        <span class="comment">//则s[l~r]可以简化为 b[l]+=c,b[r]-=c</span></span><br><span class="line">        <span class="type">int</span> l,r,c;</span><br><span class="line">        <span class="keyword">while</span>(m--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            l = scanner.nextInt();</span><br><span class="line">            r = scanner.nextInt();</span><br><span class="line">            c = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">            ai[l] += c;</span><br><span class="line">            <span class="keyword">if</span>(r&lt;n)&#123;</span><br><span class="line">                ai[r+<span class="number">1</span>] -= c;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新si</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            si[i] = ai[i] + si[i-<span class="number">1</span>];</span><br><span class="line">            System.out.print(si[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="相关简单题"><a href="#相关简单题" class="headerlink" title="相关简单题"></a>相关简单题</h2><p><a href="https://www.acwing.com/problem/content/799/">AcWing 797. 差分</a></p><p><a href="https://www.acwing.com/problem/content/2043/">AcWing 2041. 干草堆</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;差分&quot;&gt;&lt;a href=&quot;#差分&quot; class=&quot;headerlink&quot; title=&quot;差分&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.</summary>
      
    
    
    
    
    <category term="前缀和" scheme="http://baiyi-ing.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>二维前缀和</title>
    <link href="http://baiyi-ing.github.io/2022/03/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <id>http://baiyi-ing.github.io/2022/03/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <published>2022-03-07T12:22:03.000Z</published>
    <updated>2022-03-21T20:27:47.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AcWing-796-子矩阵的和"><a href="#AcWing-796-子矩阵的和" class="headerlink" title="AcWing 796. 子矩阵的和"></a><a href="https://www.acwing.com/problem/content/798/">AcWing 796. 子矩阵的和</a></h1><h2 id="一-题目详情"><a href="#一-题目详情" class="headerlink" title="一. 题目详情"></a>一. 题目详情</h2><p>输入一个 nn 行 mm 列的整数矩阵，再输入 qq 个询问，每个询问包含四个整数 x1,y1,x2,y2x1,y1,x2,y2，表示一个子矩阵的左上角坐标和右下角坐标。</p><p>对于每个询问输出子矩阵中所有数的和。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含三个整数 n，m，qn，m，q。</p><p>接下来 nn 行，每行包含 mm 个整数，表示整数矩阵。</p><p>接下来 qq 行，每行包含四个整数 x1,y1,x2,y2x1,y1,x2,y2，表示一组询问。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>共 qq 行，每行输出一个询问的结果。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤n,m≤10001≤n,m≤1000,<br>1≤q≤2000001≤q≤200000,<br>1≤x1≤x2≤n1≤x1≤x2≤n,<br>1≤y1≤y2≤m1≤y1≤y2≤m,<br>−1000≤矩阵内元素的值≤1000−1000≤矩阵内元素的值≤1000</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3 4 3</span><br><span class="line">1 7 2 4</span><br><span class="line">3 6 2 8</span><br><span class="line">2 1 2 3</span><br><span class="line">1 1 2 2</span><br><span class="line">2 1 3 4</span><br><span class="line">1 3 3 4</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">17</span><br><span class="line">27</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h2 id="二-算法思想"><a href="#二-算法思想" class="headerlink" title="二. 算法思想"></a>二. 算法思想</h2><p><img src="https://s2.loli.net/2022/03/07/DoCXLxraynBO5MG.png" alt="image.png"></p><table><thead><tr><th align="left"></th><th><strong>计算s[i,j]</strong></th><th><strong>计算s[(x1,y1)(x2,y2)]</strong></th></tr></thead><tbody><tr><td align="left"><strong>红点</strong></td><td>a[i,j]</td><td>a[x2,y2]</td></tr><tr><td align="left"><strong>绿点</strong></td><td>a[i-1,j-1]</td><td>a[x1-1,y1-1]  (x1,y1）系类减了1才不在范围四点包围内)</td></tr><tr><td align="left"><strong>黄点</strong></td><td>a[i,j-1]</td><td>a[x1-1,y2]（同上）</td></tr><tr><td align="left"><strong>蓝点</strong></td><td>a[i,j-1]</td><td>a[x2,y1-1]（同上）</td></tr></tbody></table><p><strong>1. 计算前缀和s[i,j] &#x3D; a[i,j] - s[i-1,j]-s[i,j-1]+s[i-1,j-1]</strong></p><p>红点 + 两蓝面 -（两南面重合多加的黄面）</p><p><strong>2. 计算区域前缀和 s[(x1,y1)~(x2,y2)]&#x3D;s[x2,y2]-s[x1-1,y2]-s[x2,y1-1]+s[x-1,y-1]</strong></p><p>最大框内正方形 - 两蓝面 +（两南面重合多减的黄面）</p><h2 id="三-笔者代码"><a href="#三-笔者代码" class="headerlink" title="三. 笔者代码"></a><strong>三. 笔者代码</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**二维前缀和*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入ai</span></span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m ; j++) &#123;</span><br><span class="line">                a[i][j] = scanner.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算二维前缀和</span></span><br><span class="line">        <span class="type">int</span>[][] s = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m ; j++) &#123;</span><br><span class="line">                s[i][j] = a[i][j]+s[i-<span class="number">1</span>][j]+s[i][j-<span class="number">1</span>]-s[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算任意面积</span></span><br><span class="line">        <span class="type">int</span> sum,x1,x2,y1,y2;</span><br><span class="line">        <span class="keyword">while</span> (q--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            x1 = scanner.nextInt();</span><br><span class="line">            y1 = scanner.nextInt();</span><br><span class="line">            x2 = scanner.nextInt();</span><br><span class="line">            y2 = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">            sum = s[x2][y2] - s[x2][y1-<span class="number">1</span>]-s[x1-<span class="number">1</span>][y2] + s[x1-<span class="number">1</span>][y1-<span class="number">1</span>];</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AcWing-796-子矩阵的和&quot;&gt;&lt;a href=&quot;#AcWing-796-子矩阵的和&quot; class=&quot;headerlink&quot; title=&quot;AcWing 796. 子矩阵的和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/probl</summary>
      
    
    
    
    
    <category term="前缀和" scheme="http://baiyi-ing.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>一维前缀和</title>
    <link href="http://baiyi-ing.github.io/2022/03/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E4%B8%80%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <id>http://baiyi-ing.github.io/2022/03/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E4%B8%80%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <published>2022-03-07T12:21:45.000Z</published>
    <updated>2022-03-21T20:27:47.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AcWing-795-前缀和"><a href="#AcWing-795-前缀和" class="headerlink" title="AcWing 795. 前缀和"></a><a href="https://www.acwing.com/problem/content/797/">AcWing 795. 前缀和</a></h1><h2 id="一-题目详情"><a href="#一-题目详情" class="headerlink" title="一. 题目详情"></a>一. 题目详情</h2><p>输入一个长度为 nn 的整数序列。</p><p>接下来再输入 mm 个询问，每个询问输入一对 l,rl,r。</p><p>对于每个询问，输出原序列中从第 ll 个数到第 rr 个数的和。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个整数 nn 和 mm。</p><p>第二行包含 nn 个整数，表示整数数列。</p><p>接下来 mm 行，每行包含两个整数 ll 和 rr，表示一个询问的区间范围。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>共 mm 行，每行输出一个询问的结果。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤l≤r≤n1≤l≤r≤n,<br>1≤n,m≤1000001≤n,m≤100000,<br>−1000≤数列中元素的值≤1000−1000≤数列中元素的值≤1000</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">2 1 3 6 4</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">6</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="二-算法思想"><a href="#二-算法思想" class="headerlink" title="二. 算法思想"></a>二. 算法思想</h2><ol><li><p>sn &#x3D; a1+a2+a3……+an 前缀和基本思想</p></li><li><p>sn &#x3D; an+s[n-1]  用于计算新的前缀和</p></li><li><p><strong>s[l,r] &#x3D; s[r] - s[l-1]</strong> 用于计算l~r的和</p></li></ol><h2 id="三-笔者代码"><a href="#三-笔者代码" class="headerlink" title="三. 笔者代码"></a>三. 笔者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**一维前缀和*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化ai</span></span><br><span class="line">        <span class="type">int</span>[] ai = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ai[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化si</span></span><br><span class="line">        <span class="type">int</span>[] si = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            si[i] = si[i-<span class="number">1</span>] + ai[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Sum(l,r) = sr-s(l-1);计算前缀和</span></span><br><span class="line">        <span class="type">int</span> l,r,sum;</span><br><span class="line">        <span class="keyword">while</span>(m--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            l = scanner.nextInt();</span><br><span class="line">            r = scanner.nextInt();</span><br><span class="line">            sum = si[r] - si[l-<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//输出l~r的和</span></span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AcWing-795-前缀和&quot;&gt;&lt;a href=&quot;#AcWing-795-前缀和&quot; class=&quot;headerlink&quot; title=&quot;AcWing 795. 前缀和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/con</summary>
      
    
    
    
    
    <category term="前缀和" scheme="http://baiyi-ing.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>ACwing4309-消灭老鼠</title>
    <link href="http://baiyi-ing.github.io/2022/03/06/ACwing/ACwing4309-%E6%B6%88%E7%81%AD%E8%80%81%E9%BC%A0/"/>
    <id>http://baiyi-ing.github.io/2022/03/06/ACwing/ACwing4309-%E6%B6%88%E7%81%AD%E8%80%81%E9%BC%A0/</id>
    <published>2022-03-06T09:27:34.000Z</published>
    <updated>2022-03-21T20:27:47.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4309-消灭老鼠"><a href="#4309-消灭老鼠" class="headerlink" title="4309. 消灭老鼠"></a><a href="https://www.acwing.com/problem/content/description/4312/">4309. 消灭老鼠</a></h1><h2 id="一-题目详情"><a href="#一-题目详情" class="headerlink" title="一. 题目详情"></a>一. 题目详情</h2><p>约翰的农场可以看作一个二维平面。</p><p>农场中有 n 个老鼠，在毁坏着农田。</p><p>第 i个老鼠的位置坐标为 (xi,yi)。</p><p>不同老鼠可能位于同一位置。</p><p>在 (x0,y0)处，装有一个双向发射的激光枪，该位置没有老鼠。</p><p>激光枪每次发射都可以将穿过点 (x0,y0) 的某一条直线上的所有老鼠都消灭掉。</p><p>请问，为了消灭所有老鼠，至少需要激光枪发射几次。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含三个整数 n,x0,y0表示共有 n 只老鼠，激光枪的位置为 (x0,y0)。</p><p>接下来 n 行，每行包含两个整数 xi,yi 表示第 ii 只老鼠的位置为 (xi,yi)。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数，表示激光枪的最少发射次数。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>前 55 个测试点满足 1≤n≤5。<br>所有测试点满足 1≤n≤1000，−104≤xi,yi≤104。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 0 0</span><br><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">2 0</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 1 2</span><br><span class="line">1 1</span><br><span class="line">1 0</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="二-问题梳理"><a href="#二-问题梳理" class="headerlink" title="二. 问题梳理"></a>二. 问题梳理</h2><p>因为激光枪射线是<strong>双向发射</strong>的，所以此题为经典的直线扫描在四周问题，我们的目光主要集中在如下几个方面</p><ol><li>怎样表达直线，有斜率截距法、向量法等</li><li>怎样存储直线</li><li>怎样判断直线是否已经存在</li></ol><h2 id="三-作者代码"><a href="#三-作者代码" class="headerlink" title="三. 作者代码"></a>三. 作者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="comment">//输入x0,y0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x0</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">y0</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="type">int</span> y,x,count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//输入小鼠位置</span></span><br><span class="line">            x = scanner.nextInt();</span><br><span class="line">            y = scanner.nextInt();</span><br><span class="line">            <span class="comment">//求向量（x-x0，y-y0）</span></span><br><span class="line">            x -= x0;y -= y0;</span><br><span class="line">            <span class="comment">//求x,y的最大公约数，求双方向量</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span>gcd(x,y);</span><br><span class="line">            <span class="comment">//除双方最大公约数</span></span><br><span class="line">            x /=mod;y /=mod;</span><br><span class="line">            <span class="comment">//因为向量是有方向的，所以我们统一把x都设为正</span></span><br><span class="line">            <span class="comment">//这样一条直线的不同方向向量变成了一个方向</span></span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;x = -x;y = -y;&#125;</span><br><span class="line">            <span class="comment">//数据范围内不重复存储</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> x*<span class="number">10000</span>+y;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//储存进set中，若已经存在则不加入，count记录直线数目</span></span><br><span class="line">            <span class="keyword">if</span>(!set.contains(temp))&#123;</span><br><span class="line">                count++;</span><br><span class="line">                set.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (b!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a%b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4309-消灭老鼠&quot;&gt;&lt;a href=&quot;#4309-消灭老鼠&quot; class=&quot;headerlink&quot; title=&quot;4309. 消灭老鼠&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/descriptio</summary>
      
    
    
    
    
    <category term="直线向量" scheme="http://baiyi-ing.github.io/tags/%E7%9B%B4%E7%BA%BF%E5%90%91%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>特殊的正方型</title>
    <link href="http://baiyi-ing.github.io/2022/02/28/ACwing/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%AD%A3%E6%96%B9%E5%9E%8B/"/>
    <id>http://baiyi-ing.github.io/2022/02/28/ACwing/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%AD%A3%E6%96%B9%E5%9E%8B/</id>
    <published>2022-02-28T12:12:36.000Z</published>
    <updated>2022-03-21T20:27:47.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特殊的正方形"><a href="#特殊的正方形" class="headerlink" title="特殊的正方形"></a><a href="http://oj.daimayuan.top/course/11/problem/386">特殊的正方形</a></h1><h2 id="一-题目描述"><a href="#一-题目描述" class="headerlink" title="一. 题目描述"></a>一. 题目描述</h2><p>输入nn，输出nn行nn列的由<code>+</code>和<code>.</code>组成的正方形，其中最外面一圈全是<code>+</code>，第二圈全是<code>.</code>，…，对于第ii圈，如果ii是奇数，那么全是<code>+</code>，否则全是<code>.</code>。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>一行，一个整数n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>n行，为满足题目要求的正方形。注意不要有行末空格。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">++++++++++</span><br><span class="line">+........+</span><br><span class="line">+.++++++.+</span><br><span class="line">+.+....+.+</span><br><span class="line">+.+.++.+.+</span><br><span class="line">+.+.++.+.+</span><br><span class="line">+.+....+.+</span><br><span class="line">+.++++++.+</span><br><span class="line">+........+</span><br><span class="line">++++++++++</span><br></pre></td></tr></table></figure><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于100%的数据，保证2≤n≤100。</p><h2 id="二-笔者见解"><a href="#二-笔者见解" class="headerlink" title="二. 笔者见解"></a>二. 笔者见解</h2><p>由题目示例可见，该图形是一个中心对称图形，当要打印此类图形时我们可以使用对称思想</p><p>1.打印左上角的1&#x2F;4图形</p><p>2.利用左右对称原理打印图形的右半部分（左右对称x轴改变y轴不改变）</p><p>3.利用上下对称原理打印图形的下半部分（上下对称y轴改变x轴不改变）</p><h2 id="三-作者代码"><a href="#三-作者代码" class="headerlink" title="三. 作者代码"></a>三. 作者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顾名思义回型为环形图案</span></span><br><span class="line"><span class="comment"> * 可以把其从中间分成四个一样的图形</span></span><br><span class="line"><span class="comment"> * 依次可以把其分为四个相类似的部分来写</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="comment">//打印空心正方形</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//打印回型左上方图形</span></span><br><span class="line">            n = scanner.nextInt();</span><br><span class="line">            <span class="type">char</span>[][] arr = <span class="keyword">new</span> <span class="title class_">char</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= (n+<span class="number">1</span>)/<span class="number">2</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;= (n+<span class="number">1</span>)/<span class="number">2</span>; j++) &#123;</span><br><span class="line">                        arr[j][i]=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                        arr[i][j]=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;= (n+<span class="number">1</span>)/<span class="number">2</span>; j++) &#123;</span><br><span class="line">                        arr[j][i]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        arr[i][j]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//建立右上角图案，对称结构</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=(n+<span class="number">1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=(n+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                    <span class="comment">//左右对称,y轴不变，x轴为n-j+1</span></span><br><span class="line">                    arr[j][i]=arr[n-j+<span class="number">1</span>][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//建立上下对称结构</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=(n+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                    <span class="comment">//在上下对称中，x轴不变，y轴为n-j+1</span></span><br><span class="line">                    arr[i][j] = arr[i][n-j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                    System.out.print(arr[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">               System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四-运行结果"><a href="#四-运行结果" class="headerlink" title="四. 运行结果"></a>四. 运行结果</h2><p><img src="https://s2.loli.net/2022/02/28/73UYPBo8uI9XCLg.png" alt="image-20220228202402758"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;特殊的正方形&quot;&gt;&lt;a href=&quot;#特殊的正方形&quot; class=&quot;headerlink&quot; title=&quot;特殊的正方形&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://oj.daimayuan.top/course/11/problem/386&quot;&gt;特殊的正方形&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
    <category term="回型对称打印" scheme="http://baiyi-ing.github.io/tags/%E5%9B%9E%E5%9E%8B%E5%AF%B9%E7%A7%B0%E6%89%93%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>力扣189-轮转数组</title>
    <link href="http://baiyi-ing.github.io/2022/02/27/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3189-%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <id>http://baiyi-ing.github.io/2022/02/27/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3189-%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/</id>
    <published>2022-02-27T04:38:37.000Z</published>
    <updated>2022-03-21T20:27:47.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="189-轮转数组"><a href="#189-轮转数组" class="headerlink" title="189. 轮转数组"></a><a href="https://leetcode-cn.com/problems/rotate-array/">189. 轮转数组</a></h1><h2 id="一-题目描述"><a href="#一-题目描述" class="headerlink" title="一. 题目描述"></a>一. 题目描述</h2><p>给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。 </p><p><strong>示例 1:</strong></p><p>输入: nums &#x3D; [1,2,3,4,5,6,7], k &#x3D; 3<br>输出: [5,6,7,1,2,3,4]<br>解释:<br>向右轮转 1 步: [7,1,2,3,4,5,6]<br>向右轮转 2 步: [6,7,1,2,3,4,5]<br>向右轮转 3 步: [5,6,7,1,2,3,4]<br><strong>示例 2:</strong></p><p>输入：nums &#x3D; [-1,-100,3,99], k &#x3D; 2<br>输出：[3,99,-1,-100]<br>解释:<br>向右轮转 1 步: [99,-1,-100,3]<br>向右轮转 2 步: [3,99,-1,-100]</p><p><strong>提示：</strong></p><p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>-231 &lt;&#x3D; nums[i] &lt;&#x3D; 231 - 1<br>0 &lt;&#x3D; k &lt;&#x3D; 105</p><h2 id="二-笔者见解"><a href="#二-笔者见解" class="headerlink" title="二. 笔者见解"></a>二. 笔者见解</h2><p>本题在力扣中属于中等难度，推荐使用<strong>二分法进行数据位置的翻转处理</strong></p><p>1.翻转整个数组的顺序</p><p>2.翻转1~k个数据</p><p>3.翻转看k~n个数据</p><h2 id="三-实现代码"><a href="#三-实现代码" class="headerlink" title="三.实现代码"></a>三.实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//翻转轮数取余数</span></span><br><span class="line">        k = k%nums.length;</span><br><span class="line">        <span class="comment">//三次翻转</span></span><br><span class="line">        reverse(<span class="number">0</span>,nums.length-<span class="number">1</span>,nums);</span><br><span class="line">        reverse(<span class="number">0</span>,k-<span class="number">1</span>,nums);</span><br><span class="line">        reverse(k,nums.length-<span class="number">1</span>,nums);</span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span>[] nums)</span>&#123;<span class="comment">//二分翻转</span></span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            temp = nums[l];</span><br><span class="line">            nums[l] = nums[r];</span><br><span class="line">            nums[r] = temp;</span><br><span class="line">            l++;r--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;189-轮转数组&quot;&gt;&lt;a href=&quot;#189-轮转数组&quot; class=&quot;headerlink&quot; title=&quot;189. 轮转数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/rotate-array/&quot;&gt;189.</summary>
      
    
    
    
    
    <category term="二分" scheme="http://baiyi-ing.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>ACwing3406-序列处理</title>
    <link href="http://baiyi-ing.github.io/2022/02/27/ACwing/ACwing3406-%E5%BA%8F%E5%88%97%E5%A4%84%E7%90%86/"/>
    <id>http://baiyi-ing.github.io/2022/02/27/ACwing/ACwing3406-%E5%BA%8F%E5%88%97%E5%A4%84%E7%90%86/</id>
    <published>2022-02-27T02:08:04.000Z</published>
    <updated>2022-03-21T20:27:47.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4306-序列处理"><a href="#4306-序列处理" class="headerlink" title="4306. 序列处理"></a><a href="https://www.acwing.com/problem/content/4309/">4306. 序列处理</a></h1><h2 id="一-题目"><a href="#一-题目" class="headerlink" title="一.题目"></a>一.题目</h2><p>给定一个长度为 n 的整数序列 a1,a2,…,an。</p><p>我们可以对该序列进行修改操作，每次操作选中其中一个元素，并使其增加 1。</p><p>现在，请你计算要使得序列中的元素各不相同，至少需要进行多少次操作。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>第二行包含 n 个整数 a1,a2,…,an。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示所需的最少操作次数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>前 66 个测试点满足 1≤n≤10。<br>所有测试点满足 1≤n≤3000，1≤ai≤n。</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 3 1 4</span><br></pre></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 2 5</span><br></pre></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="二-笔者见解"><a href="#二-笔者见解" class="headerlink" title="二.笔者见解"></a>二.笔者见解</h2><p>本题属于acwing的中等难度题目，解题难点在于思路不好理清，当理清思路后会发现次题的破解难度不大。</p><p>在这里作者建议，灵活使用两个一维数组，一个数组用来存数值，用另一个数组的下标用来帮助数值变化。</p><h2 id="三-解题"><a href="#三-解题" class="headerlink" title="三.解题"></a>三.解题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录这N个数值数值</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];<span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] num = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(num[arr[i]] != <span class="number">0</span>)&#123;arr[i]++;res++;&#125;</span><br><span class="line">            num[arr[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4306-序列处理&quot;&gt;&lt;a href=&quot;#4306-序列处理&quot; class=&quot;headerlink&quot; title=&quot;4306. 序列处理&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/4309/&quot;&gt;430</summary>
      
    
    
    
    
    <category term="序列处理" scheme="http://baiyi-ing.github.io/tags/%E5%BA%8F%E5%88%97%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ACwing4210-数字</title>
    <link href="http://baiyi-ing.github.io/2022/01/16/ACwing/ACwing4210-%E6%95%B0%E5%AD%97/"/>
    <id>http://baiyi-ing.github.io/2022/01/16/ACwing/ACwing4210-%E6%95%B0%E5%AD%97/</id>
    <published>2022-01-16T02:54:13.000Z</published>
    <updated>2022-03-21T20:27:47.420Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目</strong>：<a href="https://www.acwing.com/problem/content/4213/">ACwing</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="1-明确题意"><a href="#1-明确题意" class="headerlink" title="1.明确题意"></a>1.明确题意</h2><p>题目要求一个大于10进制整数A转换成2~A-1进制，并且把进制转化后的数字的各个位数相加，并将最后结果除以A-2</p><h2 id="2-解题步骤"><a href="#2-解题步骤" class="headerlink" title="2.解题步骤"></a>2.解题步骤</h2><p>1）把10进制数转换为其它进制数，采用比较朴素的<strong>辗转相除法</strong>，求出进制转换后的每一位数是多少。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">base</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123; sum += n % i, n /= i; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如把212转化为七进制</strong></p><img src="https://s2.loli.net/2022/01/16/2IMOwqpj8x7RFeD.jpg" alt="F090CA846E06397E0532E0C77CC70147.jpg" style="zoom: 33%;" /><p><strong>验证</strong></p><img src="https://s2.loli.net/2022/01/16/DxXudCGJqs4kn5Y.jpg" alt="B7696F80F2A0B42D3E4389E188DB1A68.jpg" style="zoom: 33%;" /><p>2）因为结果输出要除A-2，所以我们采用<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675?fromtitle=%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95&fromid=4625352&fr=aladdin">欧几里得算法</a>求解其最大公约数，让两者分别除自己的最大公约数后再输出</p><p>欧几里得算法的核心公式：gcd(a,b) &#x3D; gcd(b,a mod b)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a % b == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）<strong>欧几里得例子：</strong>假如需要求 1997 和 615 两个正整数的最大公约数,用欧几里得算法，是这样进行的：</p><p>1997 &#x2F; 615 &#x3D; 3 (余 152)</p><p>615 &#x2F; 152 &#x3D; 4(余7)</p><p>152 &#x2F; 7 &#x3D; 21(余5)</p><p>7 &#x2F; 5 &#x3D; 1 (余2)</p><p>5 &#x2F; 2 &#x3D; 2 (余1)</p><p>2 &#x2F; 1 &#x3D; 2 (余0)</p><p>至此，最大公约数为1</p><p>以除数和余数反复做除法运算，当余数为 0 时，取当前算式除数为最大公约数，所以就得出了 1997 和 615 的最大公约数 1。</p><h2 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3.完整代码"></a>3.完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">base</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123; sum += n % i, n /= i; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a % b == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; i ++ ) <span class="built_in">base</span>(n, i);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a = sum, b = n - <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="built_in">gcd</span>(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&quot;</span>, a / c, b / c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;题目&lt;/strong&gt;：&lt;a href=&quot;https://www.acwing.com/problem/content/4213/&quot;&gt;ACwing&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="欧几里得算法" scheme="http://baiyi-ing.github.io/tags/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>力扣373-查找和最小的K队数字</title>
    <link href="http://baiyi-ing.github.io/2022/01/15/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3373-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9C%80%E5%B0%8F%E7%9A%84K%E9%98%9F%E6%95%B0%E5%AD%97/"/>
    <id>http://baiyi-ing.github.io/2022/01/15/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3373-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9C%80%E5%B0%8F%E7%9A%84K%E9%98%9F%E6%95%B0%E5%AD%97/</id>
    <published>2022-01-15T02:31:28.000Z</published>
    <updated>2022-03-21T20:27:47.446Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/">力扣</a></p><p>解题思路：</p><p>可以先了解一下<a href="https://www.cnblogs.com/wei-jing/p/10806236.html">优先队列</a></p><p>对于集合中找前K小的元素，常用的方法是可以使用大小为K的大根堆（用一个降序的优先队列实现），依次遍历集合中的元素</p><p>当堆未满时，即元素个数小于K<br>                直接将元素加入到堆里</p><p>当堆满了时<br>                若当前元素大于堆顶，则跳过</p><p>​                若当前元素不大于堆顶，则将堆顶移除，在堆中加入当前元素</p><p>​                最后，堆里的元素就是前K小的元素。<br>———————————————————————————————————</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; kSmallestPairs(int[] nums1, int[] nums2, int k) &#123;</span><br><span class="line">        PriorityQueue&lt;List&lt;Integer&gt;&gt; queue = new PriorityQueue&lt;&gt;(k, (o1,o2)-&gt;&#123;return (o2.get(0)+o2.get(1) - o1.get(0)-o1.get(1));&#125;);</span><br><span class="line">        for(int i = 0; i &lt; Math.min(nums1.length, k); i++)&#123;</span><br><span class="line">            for(int j = 0; j &lt; Math.min(nums2.length, k); j++)&#123;</span><br><span class="line">                if(queue.size() == k &amp;&amp; (queue.peek().get(0)+ queue.peek().get(1) &lt; nums1[i]+nums2[j]) )&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                //没有break表示当前的和小于最大的，若队列满了则把最大的出队，再加入当前的</span><br><span class="line">                if(queue.size() == k)&#123;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                &#125;</span><br><span class="line">                ArrayList&lt;Integer&gt; new_pair = new ArrayList&lt;&gt;();</span><br><span class="line">                new_pair.add(nums1[i]);</span><br><span class="line">                new_pair.add(nums2[j]);</span><br><span class="line">                queue.add(new_pair);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = new LinkedList&lt;&gt;();</span><br><span class="line">        while(!queue.isEmpty())&#123;</span><br><span class="line">            res.add(0, queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目：&lt;a href=&quot;https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/&quot;&gt;力扣&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解题思路：&lt;/p&gt;
&lt;p&gt;可以先了解一下&lt;a href=&quot;https://www.cnb</summary>
      
    
    
    
    
    <category term="优先队列" scheme="http://baiyi-ing.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
