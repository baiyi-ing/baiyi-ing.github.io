<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随意</title>
  
  
  <link href="http://baiyi-ing.github.io/atom.xml" rel="self"/>
  
  <link href="http://baiyi-ing.github.io/"/>
  <updated>2022-06-16T03:52:04.714Z</updated>
  <id>http://baiyi-ing.github.io/</id>
  
  <author>
    <name>白依</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ACwing4268-性感素数</title>
    <link href="http://baiyi-ing.github.io/2022/06/16/2022%E6%9A%91%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ACwing4268-%E6%80%A7%E6%84%9F%E7%B4%A0%E6%95%B0/"/>
    <id>http://baiyi-ing.github.io/2022/06/16/2022%E6%9A%91%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ACwing4268-%E6%80%A7%E6%84%9F%E7%B4%A0%E6%95%B0/</id>
    <published>2022-06-16T03:35:22.000Z</published>
    <updated>2022-06-16T03:52:04.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>“<a href="http://mathworld.wolfram.com/SexyPrimes.html">性感素数</a> ”是指形如 (p,p+6) 这样的一对素数。</p><p>之所以叫这个名字，是因为拉丁语管“六”叫“sex”（即英语的“性感”）。</p><p>现给定一个整数，请你判断其是否为一个性感素数。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><strong>输入格式</strong></h2><p>输入在一行中给出一个正整数 NN。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><strong>输出格式</strong></h2><p>若 N 是一个性感素数，则在一行中输出 <code>Yes</code>，并在第二行输出与 N 配对的另一个性感素数（若这样的数不唯一，输出较小的那个）。</p><p>若 N 不是性感素数，则在一行中输出 <code>No</code>，然后在第二行输出大于 N 的最小性感素数。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><p>1≤N≤108</p><h2 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">47</span><br></pre></td></tr></table></figure><h2 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">41</span><br></pre></td></tr></table></figure><h2 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure><h2 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">23</span><br></pre></td></tr></table></figure><h1 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h1><p>本题运用了经典求<a href="https://baike.baidu.com/item/%E8%B4%A8%E6%95%B0/263515">素数</a>的方法求解，使用的判断素数算法模板如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">prime</span> <span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(num&lt;=<span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= num/i; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span>(num%i == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>本题的可能情况有一下几种</strong></p><ol><li>输入的数据num是素数，当num-6是素数，则输出num-6</li><li>输入的数据num是素数，当num-6是不素数，但num+6是素数，则输出num+6</li><li>输入的数据num不是素数，则开始不断加1，知道找到符合情况1或情况2数字，输出这个数</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="笔者java代码"><a href="#笔者java代码" class="headerlink" title="笔者java代码"></a>笔者java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> prime(n-<span class="number">6</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span>(prime(n)&amp;&amp;(a||prime(n+<span class="number">6</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(a)&#123;</span><br><span class="line">                 <span class="comment">//输入的数据num是素数，当num-6是素数，则输出num-6</span></span><br><span class="line">                System.out.println(n-<span class="number">6</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//输入的数据num是素数，当num-6是不素数，但num+6是素数，则输出num+6</span></span><br><span class="line">                System.out.println(n+<span class="number">6</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//输入的数据num不是素数，则开始不断加1，知道找到符合情况1或情况2数字，输出这个数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                n++;</span><br><span class="line">                a=prime(n-<span class="number">6</span>);</span><br><span class="line">                <span class="keyword">if</span>(prime(n)&amp;&amp;(a||prime(n+<span class="number">6</span>)))&#123;</span><br><span class="line">                    System.out.println(n);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">prime</span> <span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;=<span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= num/i; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num%i == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="闫式C-代码"><a href="#闫式C-代码" class="headerlink" title="闫式C++代码"></a>闫式C++代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">6</span>; i &lt;= n + <span class="number">6</span>; i += <span class="number">12</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_prime</span>(i) &amp;&amp; <span class="built_in">is_prime</span>(n))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>;; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_prime</span>(i) &amp;&amp; (<span class="built_in">is_prime</span>(i - <span class="number">6</span>) || <span class="built_in">is_prime</span>(i + <span class="number">6</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：yxc</span><br><span class="line">链接：https:<span class="comment">//www.acwing.com/activity/content/code/content/3590406/</span></span><br><span class="line">来源：AcWing</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;“&lt;a href=&quot;http://mathworld.wolfram.com/SexyPrimes.html&quot;&gt;性感素数&lt;/a&gt; ”是指形如</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>哈夫曼树</title>
    <link href="http://baiyi-ing.github.io/2022/06/15/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
    <id>http://baiyi-ing.github.io/2022/06/15/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</id>
    <published>2022-06-15T14:10:30.000Z</published>
    <updated>2022-06-15T17:02:26.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><strong>笔者使用来自于acwing-148. 合并果子这题来对哈夫曼树的构建及其使用做出声明</strong></p><p>在一个果园里，达达已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。</p><p>达达决定把所有的果子合成一堆。</p><p>每一次合并，达达可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。</p><p>可以看出，所有的果子经过 n−1 次合并之后，就只剩下一堆了。</p><p>达达在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以达达在合并果子时要尽可能地节省体力。</p><p>假定每个果子重量都为 1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使达达耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有 33种果子，数目依次为 1，2，9。</p><p>可以先将 1、2堆合并，新堆数目为 3，耗费体力为 3。</p><p>接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12，耗费体力为 12。</p><p>所以达达总共耗费体力&#x3D;3+12&#x3D;15。</p><p>可以证明 15 为最小的体力耗费值。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包括两行，第一行是一个整数 n，表示果子的种类数。</p><p>第二行包含 n 个整数，用空格分隔，第 i 个整数 ai 是第 i 种果子的数目。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。</p><p>输入数据保证这个值小于 231。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>1≤n≤10000<br>1≤ai≤20000</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 </span><br><span class="line">1 2 9 </span><br></pre></td></tr></table></figure><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h1 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h1><p>本题实际上是哈夫曼树的应用题目，原理与哈夫曼树相似，<strong>即每次找两个最小堆合并成一堆</strong>，最终得到最小花费。最终的值的大小为个子<strong>叶*度（子叶的高度或者说子叶在的层数减一）</strong></p><p><img src="https://s2.loli.net/2022/06/16/OdvSZUwVJIiBboM.png" alt="image.png"></p><h1 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h1><h2 id="java版本"><a href="#java版本" class="headerlink" title="java版本"></a><strong>java版本</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//定义一个小根堆</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//定义读写变量</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        <span class="comment">//输入数据个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(reader.readLine());</span><br><span class="line">        <span class="comment">//输入具体数据</span></span><br><span class="line">        String []s = reader.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            queue.offer(Integer.parseInt(s[i]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始构建哈夫曼树</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>,a,b;</span><br><span class="line">        <span class="comment">//当最终只剩下一个数据的时候，极为最小力气花费量</span></span><br><span class="line">        <span class="keyword">while</span> (queue.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//取最小的两个数据，最小数据在堆顶，用掉并删除,再添加两个较小数据的和进入堆中</span></span><br><span class="line">            a=queue.poll();</span><br><span class="line">            b=queue.poll();</span><br><span class="line">            ans =ans+a+b;</span><br><span class="line">            queue.add(a+b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出答案</span></span><br><span class="line">        writer.write(ans+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="闫式C-版本"><a href="#闫式C-版本" class="headerlink" title="闫式C++版本"></a>闫式C++版本</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; heap;</span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        heap.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = heap.<span class="built_in">top</span>(); heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> b = heap.<span class="built_in">top</span>(); heap.<span class="built_in">pop</span>();</span><br><span class="line">        res += a + b;</span><br><span class="line">        heap.<span class="built_in">push</span>(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：yxc</span><br><span class="line">链接：https:<span class="comment">//www.acwing.com/solution/content/3258/</span></span><br><span class="line">来源：AcWing</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;笔者使用来自于acwing-148. 合并果子这题来对哈夫曼树的构建及其使用做出声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个</summary>
      
    
    
    
    
    <category term="贪心算法" scheme="http://baiyi-ing.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络复习</title>
    <link href="http://baiyi-ing.github.io/2022/05/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
    <id>http://baiyi-ing.github.io/2022/05/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-05-30T14:34:01.000Z</published>
    <updated>2022-06-03T06:35:26.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="1-为什么要对计算机网络进行分层？分层的原则？"><a href="#1-为什么要对计算机网络进行分层？分层的原则？" class="headerlink" title="1. 为什么要对计算机网络进行分层？分层的原则？"></a>1. 为什么要对计算机网络进行分层？分层的原则？</h2><p>a．因为计算机网络是一个复杂的系统，采用层次化结构的方法来描述它，可以将复杂的网络间题分解为许多比较小的、界线比较清晰简单的部分来处理； </p><p>b．分层的一般原则是将一组相近的功能放在一起，形成一个网络的结构层次。 </p><h2 id="2-冗余码"><a href="#2-冗余码" class="headerlink" title="2. 冗余码"></a>2. 冗余码</h2><p>及所给的计算数据<strong>M尾部加上多项式最高幂次个0</strong>，然后再将多项式的各个<strong>常数项</strong>进行提取，<strong>有就写1没有就写0</strong>，然后诸位异或计算，若最后的余数不为0，则M的数据就有问题。(P77)</p><p><img src="https://s2.loli.net/2022/06/01/IhSjO6ZW23xoVQN.jpg" alt="055AB9C5813ED0CE23063C42C0E345B3.jpg"></p><h2 id="3-CSMA-x2F-CD（载波监听多点接入-x2F-碰撞）"><a href="#3-CSMA-x2F-CD（载波监听多点接入-x2F-碰撞）" class="headerlink" title="3. CSMA&#x2F;CD（载波监听多点接入&#x2F;碰撞）"></a>3. CSMA&#x2F;CD（载波监听多点接入&#x2F;碰撞）</h2><p><strong>工作方式：</strong>许多计算机以多点接入的方式连接到一根总线上（MA）。每一个站在发送帧之前有检测冲突就等待发送。发送数据之中，每个站都必须继续不停的检测信道，发现冲突停止发送（CS&#x2F;CD）</p><p><strong>优缺点：</strong>  原理比较简单，技术上易实现，网络中各工作站处于平等地位 ，不需集中控制，不提供优先级控制。但在网络负载增大时，发送时间增长，发送效率急剧下降。</p><h2 id="4-TCP-x2F-UDP"><a href="#4-TCP-x2F-UDP" class="headerlink" title="4. TCP&#x2F;UDP"></a>4. TCP&#x2F;UDP</h2><p><strong>简述：</strong>TCP和UDP都是<a href="https://so.csdn.net/so/search?q=%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE&spm=1001.2101.3001.7020">传输层协议</a>。TCP&#x2F;IP是一个协议簇，里面包含了很多协议，UDP和TCP只是其中两个协议，之所以命为TCP&#x2F;IP，是因为这两个协议非常重要。</p><p><strong>区别：</strong>TCP提供面向链接服务，在传送数据之前必须要先建立链接，数据传送结束后要释放链接。UDP在传输数据之前不需要建立链接。</p><p>因此，通常来说TCP是可靠稳定的但是效率不够高，而UDP则相反。</p><p>(P45)</p><h2 id="5-常用编码方式"><a href="#5-常用编码方式" class="headerlink" title="5. 常用编码方式"></a>5. 常用编码方式</h2><p><img src="https://s2.loli.net/2022/06/01/RtOrS7dUfa2N5EC.png" alt="image.png"></p><p><strong>不归零制：</strong> 正电平表示1，负电平表示0。</p><p><strong>归零制：</strong>向上正脉冲表示1，向下负脉冲表示0.</p><p><strong>曼切斯特编码：</strong>每一位的中心向上跳为1，向下跳为0</p><p><strong>差分马切斯特编码：</strong>开始边界有和上一位末尾不一样，有跳变代表1，无跳变代表0</p><p>注意：0和1可以换身份，如曼切斯特编码也可以是向上为0，向下为1。</p><h2 id="6-计算机网络的组成部分"><a href="#6-计算机网络的组成部分" class="headerlink" title="6.计算机网络的组成部分"></a>6.计算机网络的组成部分</h2><p>计算机网络主要由<strong>软件、硬件、协议</strong>三部分组成。</p><p><strong>硬件：</strong>主要由主机、物理链路（双绞线与光纤）、交换设备（如路由与交换机）、通信处理机（如网卡）等组成。</p><p><strong>软件：</strong>软件包括各种实现资源共享的软件和方便用户使用的各种工具软件，软件多属于应用层。</p><p><strong>协议：</strong>协议是核心，规定了网络传输时所遵循的规范。就像现实世界的法律一样。</p><h2 id="7-虚电路与数据报"><a href="#7-虚电路与数据报" class="headerlink" title="7. 虚电路与数据报"></a>7. 虚电路与数据报</h2><p><img src="https://s2.loli.net/2022/06/01/QgrmGLaWMHJfDT7.png" alt="image.png"></p><p>(P117)</p><hr><h2 id="8-域名系统DNS"><a href="#8-域名系统DNS" class="headerlink" title="8.域名系统DNS"></a>8.域名系统DNS</h2><p>存在意义：为了让人类好记忆好阅读，使用DNS域名系统给网站起别名，这样网站除了使用IP地址可访问外还可以使用域名来访问（如<a href="http://www.baidu.com)/">www.baidu.com）</a></p><p><img src="https://s2.loli.net/2022/06/03/CodBG1u4EqtkIsx.jpg" alt="F3CDF1E2B41302A0BEFDAD23735AF197.jpg"></p><p>(P283)</p><h2 id="9-面向链接的三阶段"><a href="#9-面向链接的三阶段" class="headerlink" title="9. 面向链接的三阶段"></a>9. 面向链接的三阶段</h2><p>此问题为运输层的相关内容，与TCP的运输链接管理有关，这三个阶段为：<strong>链接建立、数据传送、链接释放</strong>。</p><p><strong>链接建立</strong>：此过程是三次报文握手，除了互相接受消息的，回复接收到消息的两次握手外，再加上了第三次握手是为了防止接收端的回复握手意外丢失后，接收端任然以为已经建立好了链接，实际上发送端没有正常的消息。第三次握手可确保前面两次相互握手都顺利执行了。</p><p><img src="https://s2.loli.net/2022/06/03/l7gfG5OFR1idSk8.png" alt="image.png"></p><p><strong>链接释放：</strong>此过程是四报文握手，这个需要注意的是，设置的2MSL的等待时间，是为了确保最后一次报文握手，在服务器接收端正常接收到然后正常关闭。若未设置，则最后一次握手数据报意外丢失后，服务器接收端未能正常接收到此提示关闭消息而未关闭，但客户端发送主机却已经先一步关闭。</p><p><img src="https://s2.loli.net/2022/06/03/haTGCP5F7eEQ1IO.png" alt="image.png"></p><h2 id="10-IP地址的分类"><a href="#10-IP地址的分类" class="headerlink" title="10. IP地址的分类"></a>10. IP地址的分类</h2><p><img src="https://s2.loli.net/2022/06/03/a7kyJoIe2WMTV6C.png" alt="image.png"></p><h2 id="11-TCP传输应用"><a href="#11-TCP传输应用" class="headerlink" title="11. TCP传输应用"></a>11. TCP传输应用</h2><p>当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。</p><p>在日常生活中，常见使用TCP协议的应用如下：</p><ul><li>浏览器</li><li>QQ文件传输</li></ul><h2 id="12-网络协议三要素"><a href="#12-网络协议三要素" class="headerlink" title="12. 网络协议三要素"></a>12. 网络协议三要素</h2><p><strong>语义：</strong>语义是解释控制信息每个部分的意义。它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应。</p><p><strong>语法：</strong>语法是用户数据与控制信息的结构与格式，以及数据出现的顺序。</p><p><strong>时序：</strong>时序是对事件发生顺序的详细说明。</p><p>计算机网络是由多个互连的结点组成，结点之间需要不断地进行数据交换，每个结点必须要奉行一致的规则。这些规则规定了所有交换数据的格式和时序。这些<strong>为网络数据交换而制定的规则、约定与标准被称为网络协议</strong></p><h2 id="13-密码技术五大基本要素"><a href="#13-密码技术五大基本要素" class="headerlink" title="13. 密码技术五大基本要素"></a>13. 密码技术五大基本要素</h2><p>信息安全的五个基本要素，即需保证信息的<strong>保密性、真实性、完整性、可用性、不可否认性</strong>。</p><p><strong>1、保密性</strong></p><p>要求保护数据内容不被泄漏，加密是实现机密性要求的常用手段。</p><p>它是信息安全一诞生就具有的特性，也是信息安全主要的研究内容之一。更通俗地讲，就是说未授权的用户不能够获取敏感信息。</p><p>对纸质文档信息，我们只需要保护好文件，不被非授权者接触即可。而对计算机及网络环境中的信息，不仅要制止非授权者对信息的阅读。也要阻止授权者将其访问的信息传递给非授权者，以致信息被泄漏。</p><p><strong>2、真实性</strong></p><p>对信息的来源进行判断，能对伪造来源的信息予以鉴别。</p><p><strong>3、完整性</strong></p><p>要求保护的数据内容是完整的、没有被篡改的。常见的保证一致性的技术手段是数字签名。</p><p>它是保护信息保持原始的状态，使信息保持其真实性。如果这些信息被蓄意地修改、插入、删除等，形成虚假信息将带来严重的后果。</p><p><strong>4、可用性</strong></p><p>是指授权主体在需要信息时能及时得到服务的能力。可用性是在信息安全保护阶段对信息安全提出的新要求，也是在网络化空间中必须满足的一项信息安全要求。</p><p><strong>5、不可否认性</strong></p><p>指在网络环境中，信息交换的双方不能否认其在交换过程中发送信息或接收信息的行为。</p><h2 id="14-常见的网络操作系统"><a href="#14-常见的网络操作系统" class="headerlink" title="14. 常见的网络操作系统"></a>14. 常见的网络操作系统</h2><p><strong>Windows操作系统：</strong>是微软公司开发的一款图形化工作界面操作系统；</p><p><strong>NetWare系统：</strong>是一个开放的网络服务器平台；</p><p><strong>Unix系统：</strong>一般用于大型机和小型机；</p><p><strong>Linux系统：</strong>是一种源代码开放的网络操作系统。</p><h2 id="15-虚拟局域网的划分方式"><a href="#15-虚拟局域网的划分方式" class="headerlink" title="15. 虚拟局域网的划分方式"></a>15. 虚拟局域网的划分方式</h2><p>划分有四种方式：</p><p><strong>1.根据端口来划分</strong></p><p>许多VLAN厂商都利用交换机的端口来划分VLAN成员。被设定的端口都在同一个广播域中。例如，一个交换机的1，2，3，4，5端口被定义为虚拟网AAA，同一交换机的6，7，8端口组成虚拟网BBB。这样做允许各端口之间的通讯，并允许共享型网络的升级。但是，这种划分模式将虚拟网限制在了一台交换机上。</p><p>第二代端口VLAN技术允许跨越多个交换机的多个不同端口划分VLAN，不同交换机上的若干个端口可以组成同一个虚拟网。</p><p>以交换机端口来划分网络成员，其配置过程简单明了。因此，从目前来看，这种根据端口来划分VLAN的方式仍然是最常用的一种方式。</p><p><strong>2.根据MAC地址划分</strong></p><p>这种划分VLAN的方法是根据每个主机的MAC地址来划分，即对每个MAC地址的主机都配置它属于哪个组。这种划分VLAN方法的最大优点就是当用户物理位置移动时，即从一个交换机换到其他的交换机时，VLAN不用重新配置，所以，可以认为这种根据MAC地址的划分方法是基于用户的VLAN，这种方法的缺点是初始化时，所有的用户都必须进行配置，如果有几百个甚至上千个用户的话，配置是非常累的。而且这种划分的方法也导致了交换机执行效率的降低，因为在每一个交换机的端口都可能存在很多个VLAN组的成员，这样就无法限制广播包了。另外，对于使用笔记本电脑的用户来说，他们的网卡可能经常更换，这样，VLAN就必须不停地配置。</p><p><strong>3.根据网络层划分</strong></p><p>这种划分VLAN的方法是根据每个主机的网络层地址或协议类型(如果支持多协议)划分的，虽然这种划分方法是根据网络地址，比如IP地址，但它不是路由，与网络层的路由毫无关系。</p><p>其优点是用户的物理位置改变了，不需要重新配置所属的VLAN，而且可以根据协议类型来划分VLAN，这对网络管理者来说很重要，还有，这种方法不需要附加的帧标签来识别VLAN，这样可以减少网络的通信量。其缺点是效率低，因为检查每一个数据包的网络层地址是需要消耗处理时间的(相对于前面两种方法)，一般的交换机芯片都可以自动检查网络上数据包的以太网帧头，但要让芯片能检查IP帧头，需要更高的技术，同时也更费时。当然，这与各个厂商的实现方法有关。</p><p><strong>4.根据IP组播划分</strong></p><p>IP 组播实际上也是一种VLAN的定义，即认为一个组播组就是一个VLAN，这种划分的方法将VLAN扩大到了广域网，因此这种方法具有更大的灵活性，而且也很容易通过路由器进行扩展，当然这种方法不适合局域网，主要是效率不高。</p><h2 id="16-内部网关协议"><a href="#16-内部网关协议" class="headerlink" title="16. 内部网关协议"></a>16. 内部网关协议</h2><p>主要有RIP和OSPF协议</p><p><img src="https://s2.loli.net/2022/06/03/QuXARDaFE7MntB1.jpg" alt="2FC64CBEFA306A1329B4A77CDD3E7FE2.jpg"></p><p><strong>a. 适用范围不同</strong></p><p>RIP适用于中小网络，比较简单。没有系统内外、系统分区，边界等概念，用到不是分类的路由。</p><p>OSPF适用于较大规模网络。它把自治系统分成若干个区域，通过系列内外路由的不同处理，区域内和区域间路由的不同处理方法，减少网络数据量大传输。</p><p><strong>b.运行有区别</strong></p><p>RIP运行时，首先向外发送请求报文，其他运行RIP的路由器收到请求后，马上把自己的路由表发送过去，在没收到请求时，会将路由删除，并广播自己新的路由表。</p><p>OSPF要求每个路由器周期性的发送链路状态信息，使得区域内所有路由器最终都能形成一个跟踪网络链路状态的链路状态数据库。利用链路状态数据库，每一个路由器都可以以自己为“根”，建立一个最短路径优先树，用来描述以自己出发，到达每个目的网络所需的开销。</p><p><strong>c.使用情况不同</strong></p><p><strong>OSPF占用的实际链</strong>路带宽比RIP少；OSPF使用的CPU时间比RIP少；OSPF适用的内存比RIP大；RIP在网络上达到平衡用的时间比OSPF多。</p><h2 id="17-码分复用"><a href="#17-码分复用" class="headerlink" title="17.码分复用"></a>17.码分复用</h2><p>简述： A·R&#x3D;A·(a + b + c + d);.</p><p><img src="https://s2.loli.net/2022/06/03/NXWfdbCpJ897neY.jpg" alt="19C8A8889A9D4B3926D65F9776B69781.jpg"></p><p>（P60）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h1&gt;&lt;h2 id=&quot;1-为什么要对计算机网络进行分层？分层的原则？&quot;&gt;&lt;a href=&quot;#1-为什么要对计算机网络进行分层？分</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="http://baiyi-ing.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>HTML学习总结</title>
    <link href="http://baiyi-ing.github.io/2022/05/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/HTML%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://baiyi-ing.github.io/2022/05/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/HTML%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2022-05-15T11:31:06.000Z</published>
    <updated>2022-05-18T09:41:28.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入门基础知识"><a href="#入门基础知识" class="headerlink" title="入门基础知识"></a>入门基础知识</h2><h3 id="１．前端三大件"><a href="#１．前端三大件" class="headerlink" title="１．前端三大件"></a>１．前端三大件</h3><p>首先我们要知道<strong>HTML、CSS、Javascript</strong>三者并称为<strong>前端三大件</strong>，一个正常的网页可以</p><p><strong>通过HTML进行基本的框架构建，通过CSS进行页面美化和排版，通过JS来实现网页的功能</strong></p><h3 id="２．HTML简介"><a href="#２．HTML简介" class="headerlink" title="２．HTML简介"></a>２．HTML简介</h3><p>HTML的全称为<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6972570">超文本标记语言</a>，是一种<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/5964436">标记语言</a>。它包括一系列<a href="https://baike.baidu.com/item/%E6%A0%87%E7%AD%BE/2440469">标签</a>．通过这些标签可以将网络上的<a href="https://baike.baidu.com/item/%E6%96%87%E6%A1%A3/1009768">文档</a>格式统一，使分散的<a href="https://baike.baidu.com/item/Internet/272794">Internet</a>资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC/5443630">文本</a>，HTML命令可以说明<a href="https://baike.baidu.com/item/%E6%96%87%E5%AD%97/612910">文字</a>，<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2/773307">图形</a>、<a href="https://baike.baidu.com/item/%E5%8A%A8%E7%94%BB/206564">动画</a>、<a href="https://baike.baidu.com/item/%E5%A3%B0%E9%9F%B3/33686">声音</a>、<a href="https://baike.baidu.com/item/%E8%A1%A8%E6%A0%BC/3371820">表格</a>、<a href="https://baike.baidu.com/item/%E9%93%BE%E6%8E%A5/2665501">链接</a>等。</p><p><a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC/2832422">超文本</a>是一种组织信息的<a href="https://baike.baidu.com/item/%E6%96%B9%E5%BC%8F/3616191">方式</a>，它通过<a href="https://baike.baidu.com/item/%E8%B6%85%E7%BA%A7%E9%93%BE%E6%8E%A5/313121">超级链接</a>方法将文本中的文字、图表与其他<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E5%AA%92%E4%BD%93/8400627">信息媒体</a>相关联。这些相互关联的信息媒体可能在同一文本中，也可能是其他文件，或是<a href="https://baike.baidu.com/item/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE/797988">地理位置</a>相距遥远的某台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>上的文件。这种组织信息方式将分布在不同位置的信息资源用随机方式进行连接，为人们查找，<a href="https://baike.baidu.com/item/%E6%A3%80%E7%B4%A2/11003896">检索</a>信息提供方便。</p><h3 id="３．HTML版本须知"><a href="#３．HTML版本须知" class="headerlink" title="３．HTML版本须知"></a>３．HTML版本须知</h3><p>HTML历史上有如下版本： [5] </p><p>①HTML 1.0：在1993年6月作为互联网工程工作小组(IETF)工作草案发布。 [5] </p><p>②HTML 2.0：1995年1 1月作为RFC 1866发布，于2000年6月发布之后被宣布已经过时。 [5] </p><p>③HTML 3.2：1997年1月14日，W3C推荐标准。 [5] </p><p>④HTML 4.0：1997年12月18日，W3C推荐标准。 [5] </p><p>⑤HTML 4.01（微小改进）：1999年12月24日，W3C推荐标准。 [5] </p><p>⑥[HTML 5](<a href="https://baike.baidu.com/item/HTML">https://baike.baidu.com/item/HTML</a> 5&#x2F;8762673)：HTML5是公认的下一代Web语言，极大地提升了Web在富媒体、富内容和富应用等方面的能力，被喻为终将改变移动互联网的重要推手。Internet Explorer 8及以前的版本不支持。 [6] </p><h3 id="４．使用的工具"><a href="#４．使用的工具" class="headerlink" title="４．使用的工具"></a>４．使用的工具</h3><p><strong>使用Google Chrome浏览器来实现，使用vscode来编译</strong>，建议官网下载，下面是笔者的VScode百度网盘资源</p><p>链接: <a href="https://pan.baidu.com/s/1-UlhQVi0RkQNyPDp_aSsfw?pwd=igsg">https://pan.baidu.com/s/1-UlhQVi0RkQNyPDp_aSsfw?pwd=igsg</a> 提取码: igsg </p><p>其实一开始使用vscode写HTML还是细节满满的，这是笔者找的相对比较好的<a href="https://blog.csdn.net/qq_51604330/article/details/116567496">安装vscode后第一个HTML网页教程</a></p><h2 id="HTML入门"><a href="#HTML入门" class="headerlink" title="HTML入门"></a>HTML入门</h2><h3 id="一．基本框架"><a href="#一．基本框架" class="headerlink" title="一．基本框架"></a>一．基本框架</h3><p>如下图所示，这是<strong>极简化基本框架模板</strong>，由“<!DOCTYPE html>”<strong>说明文件类型</strong>，由用角括号包裹一对htlm，在这之中就是html编写主板。</p><p>两个head中间写htlm文件的网站资讯，如<strong>网页名字和网页编码格式等</strong>。</p><p>两个body中间写html文件的网站内容主，如<strong>图片，链接，文章等</strong></p><img src="https://s2.loli.net/2022/05/15/fumenPRQ2T89rhN.png" alt="image.png" style="zoom:150%;" /><h3 id="二．第一个网页"><a href="#二．第一个网页" class="headerlink" title="二．第一个网页"></a>二．第一个网页</h3><p>了解了基本框架后，让我们一起来编写第一个简单网页吧！加油！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>page2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是我们的第一个HTML网页哦！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/15/3CQZiHehRDM1T9Y.png" alt="image.png"></p><p><strong>笔者来提示注意事项并展示成果了哦！</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意事项 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 角括号里！--为注释标签哦！--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- head用来放网页的资讯 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- meta用来确定编码格式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以不要p直接在body中写相关内容哦！--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以下载相关插件后，直接使用alt+b浏览器阅览网页 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/15/Ch2ZBTg4yI6OatA.png" alt="image.png"></p><h3 id="三-基本标签"><a href="#三-基本标签" class="headerlink" title="三. 基本标签"></a>三. 基本标签</h3><p>由上文可知角括号里总包括一些标签字母，来实现各种不同的功能</p><p>由于实在是太多拉，这里笔者给大家找了一个相当不错的<a href="https://special.rhky.com/mobile/mooc/tocourse/214380988?t=1652865943244">《HTML标签》大全</a>哦，建议收藏。</p><p>下图是笔者自己写的个别标签使用图片哦！</p><p><img src="https://s2.loli.net/2022/05/15/oqF6gfOR8SVX451.png" alt="image.png"></p><p><strong>相关代码</strong></p><p>可以偷懒使用作者的代码进行简单修改（jpg、MP4文件需要自己本地的），但是还是建议自己敲一遍熟悉熟悉</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- head用来放网页的资讯 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- meta用来确定编码格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;周杰伦最帅,不愧是我喜欢的银，（对网页的描述）&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mata</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;周杰伦&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mata</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mata</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;标签，周杰伦，html，自学&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不同设备视口调试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width = device-width,initial-scale=1.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个html网页哦<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body里面放内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 基本标签学习 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>第一篇文章<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天开始<span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>入门<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>了呢<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>第二篇文章<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>开心<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- html的链接&amp;图片 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baiyi-ing.github.io/&quot;</span>&gt;</span>白依的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;page2.html&quot;</span>&gt;</span>page2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;HTML/page3.html&quot;</span>&gt;</span>page3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1650390422890.jpg&quot;</span>&gt;</span>鸭鸭<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://sm.ms/image/y9aOnjLwukBxHZC&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s2.loli.net/2022/05/14/y9aOnjLwukBxHZC.png&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1650390422890.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--在网页中加入影片 &amp; 嵌入YouTube影片--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;前奏.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span>&gt;</span>一个本地视频<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 列表 &amp; 表格 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">lo</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>ol是可以排序的哦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这就是相应效果哦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>加入type可以改变存档情况<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>A表示用大写字母排序<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>a表示用小写字母排序<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>i表示用小写罗马字排序<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>I表示用大写写罗马字排序<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">lo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>英文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 容器div &amp; 容器span --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: blueviolet;&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在学习css的时候如果我们善用容器div后期会方便美化--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>英文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span> div <span class="tag">&lt;/<span class="name">dic</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span> div会换行 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span> span <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spam</span>&gt;</span> span不会换行 <span class="tag">&lt;/<span class="name">spam</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- HTML输入文本、form表单 --&gt;</span></span><br><span class="line">        表单<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>/&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>你好鸭，可以在这里输入哦！<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：图片img、MP4等使用前要提前保存到所在文件中才能使用哦</strong></p><p><img src="https://s2.loli.net/2022/05/15/DiIs8jkF2tfCgET.png" alt="image.png"></p><h3 id="四-子页跳转"><a href="#四-子页跳转" class="headerlink" title="四. 子页跳转"></a>四. 子页跳转</h3><p><strong>建立Page2和Page3作为主页index的子页</strong>,不同于其它网页链接，这两个子页都是总文件中的文件，而且page3还<strong>不是直接在总文件夹中的文件</strong>。如下图是两个不同子页<strong>跳转到首页</strong>（index.html）的写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- head用来放网页的资讯 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- meta用来确定编码格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Page3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--page3和主页并不是一个资料夹，所以要../返回上一个文件夹--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../index.html&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/15/OiSQYK4E7vFCuxe.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;入门基础知识&quot;&gt;&lt;a href=&quot;#入门基础知识&quot; class=&quot;headerlink&quot; title=&quot;入门基础知识&quot;&gt;&lt;/a&gt;入门基础知识&lt;/h2&gt;&lt;h3 id=&quot;１．前端三大件&quot;&gt;&lt;a href=&quot;#１．前端三大件&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="前端" scheme="http://baiyi-ing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="http://baiyi-ing.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>前端规划</title>
    <link href="http://baiyi-ing.github.io/2022/05/12/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E8%A7%84%E5%88%92/"/>
    <id>http://baiyi-ing.github.io/2022/05/12/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E8%A7%84%E5%88%92/</id>
    <published>2022-05-12T12:38:52.000Z</published>
    <updated>2022-05-12T14:01:39.736Z</updated>
    
    <content type="html"><![CDATA[<p><strong>此前端规划只是初版，后续会找朋友帮忙提供相应改进意见，如果后期笔者只是想要入门学习的话，笔者最多会规划实行前三阶段，等确定好大方向后，笔者会选择是否深入话学习</strong></p><p><strong>第一阶段</strong></p><p>入门很显然要从<strong>HTML和css</strong>开始打基础，后学习<strong>js</strong>相关技术，然后学习一个入门框架**<a href="https://baike.baidu.com/item/jQuery/5385065?fr=aladdin">jQuery</a>**</p><p><img src="https://s2.loli.net/2022/05/12/MKBSlJVfULuZamx.png" alt="image.png"></p><p><strong>第二阶段</strong></p><p>主要是HTML5的学习和移动web开发</p><p><img src="https://s2.loli.net/2022/05/12/f8NQGeOXb7ycYW3.png" alt="image.png"></p><p><strong>第三阶段</strong></p><p>主要是HTTP的学习和<strong>AJAX</strong>编程学习</p><p><img src="https://s2.loli.net/2022/05/12/8lFBpHagU7zvwhs.png" alt="image.png"></p><p><strong>第四阶段</strong></p><p><img src="https://s2.loli.net/2022/05/12/HXZpotwi69gWCbK.png" alt="BF_M8K51__CF@ICU_O_B8QH.png"></p><p><strong>第五阶段</strong></p><p><img src="https://s2.loli.net/2022/05/12/efauTmhJ1F4iLc2.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;此前端规划只是初版，后续会找朋友帮忙提供相应改进意见，如果后期笔者只是想要入门学习的话，笔者最多会规划实行前三阶段，等确定好大方向后，笔者会选择是否深入话学习&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;入门很显</summary>
      
    
    
    
    
    <category term="前端" scheme="http://baiyi-ing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ACwing4417-选区间</title>
    <link href="http://baiyi-ing.github.io/2022/05/07/ACwing/ACwing4417-%E9%80%89%E5%8C%BA%E9%97%B4/"/>
    <id>http://baiyi-ing.github.io/2022/05/07/ACwing/ACwing4417-%E9%80%89%E5%8C%BA%E9%97%B4/</id>
    <published>2022-05-07T13:03:23.000Z</published>
    <updated>2022-05-12T11:19:59.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-题目描述"><a href="#一-题目描述" class="headerlink" title="一. 题目描述"></a>一. 题目描述</h1><p>给定 n 个一类区间 (l1,i,r1,i)。</p><p>给定 m 个二类区间 (l2,i,r2,i)。</p><p>请你从一类区间中挑选一个区间，从二类区间中挑选一个区间。</p><p>要求，选出的两个区间之间的距离尽可能大。</p><p>请你输出最大可能距离。</p><p>关于两区间 (l1,r1)和 (l2,r2) 之间的距离，我们规定：</p><ul><li>如果两区间存在交集，则区间距离为 0。</li><li>如果两区间不存在交集，则区间距离为 |i−j| 的最小可能值，其中 l1≤i≤r1,l2≤j≤r2。</li></ul><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数 n。</p><p>接下来 n 行，每行包含两个整数 l1,i,r1,i。</p><p>再一行包含一个整数 m。</p><p>最后 mm 行，每行包含两个整数 l2,i,r2,il2,i,r2,i。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数，表示最大可能距离。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>前三个测试点满足 1≤n,m≤10。<br>所有测试点满足 1≤n,m≤2×105，1≤l1,i≤r1,i≤1091≤l1，1≤l2,i≤r2,i≤109。</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 5</span><br><span class="line">2 6</span><br><span class="line">2 3</span><br><span class="line">2</span><br><span class="line">2 4</span><br><span class="line">6 8</span><br></pre></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 5</span><br><span class="line">2 6</span><br><span class="line">3 7</span><br><span class="line">2</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h1 id="二-笔者解析"><a href="#二-笔者解析" class="headerlink" title="二. 笔者解析"></a>二. 笔者解析</h1><p>本题为经典的区间集合判断题，一般区间判断题我们优先考虑选用<strong>贪心算法</strong>来解题，但由于贪心算法比较玄学，通常为题目中隐藏的数学常识题，所以我们要结合具体问题来分析原题中的隐藏数学原理</p><h1 id="三-笔者代码"><a href="#三-笔者代码" class="headerlink" title="三. 笔者代码"></a>三. 笔者代码</h1><ol><li>c++复杂代码</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line">PII q[N],q2[N];</span><br><span class="line">PII q1[N],q3[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;q[i].y, &amp;q[i].x);</span><br><span class="line">        q1[i].x=q[i].y,q1[i].y=q[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(q1+<span class="number">1</span>,q1+n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;q2[i].x, &amp;q2[i].y);</span><br><span class="line">        q3[i].x=q2[i].y,q3[i].y=q2[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q2+<span class="number">1</span>,q2+m+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(q3+<span class="number">1</span>,q3+m+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> a=<span class="built_in">max</span>(<span class="number">0</span>,q2[m].x-q[<span class="number">1</span>].x);</span><br><span class="line">    <span class="type">int</span> b=<span class="built_in">max</span>(<span class="number">0</span>,q1[n].x-q3[<span class="number">1</span>].x);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>c++贪心常识简化代码</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> max1=<span class="number">0</span>,min1=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        max1=<span class="built_in">max</span>(max1,a);</span><br><span class="line">        min1=<span class="built_in">min</span>(min1,b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="type">int</span> max2=<span class="number">0</span>,min2=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        max2=<span class="built_in">max</span>(max2,a);</span><br><span class="line">        min2=<span class="built_in">min</span>(min2,b);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">max</span>(max2-min1,max1-min2))&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>java贪心常识简化代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">//找到n区间的最大左端点和最小右端点</span></span><br><span class="line">            max = Math.max(scanner.nextInt(),max);</span><br><span class="line">            min = Math.min(scanner.nextInt(),min);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">min1</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">//找到m区间的最大左端点和最小右端点</span></span><br><span class="line">            max1 = Math.max(scanner.nextInt(),max1);</span><br><span class="line">            min1 = Math.min(scanner.nextInt(),min1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最大的左端点减最小的右端点，则为最大不相交区间，本题分两种情况，n区间于m区间的位置不确定</span></span><br><span class="line">        System.out.println(Math.max(<span class="number">0</span>,Math.max(max - min1,max1-min)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四-本题解法"><a href="#四-本题解法" class="headerlink" title="四. 本题解法"></a>四. 本题解法</h1><p>我们可以发现：</p><p><strong>两段不相交的区间中间的间隔 &#x3D; 右边区间的最小值 — 左边区间的最大值</strong></p><p>由此可以得出结论，左边最大值越小或者在右边最小值越大，间隔的范围就越大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-题目描述&quot;&gt;&lt;a href=&quot;#一-题目描述&quot; class=&quot;headerlink&quot; title=&quot;一. 题目描述&quot;&gt;&lt;/a&gt;一. 题目描述&lt;/h1&gt;&lt;p&gt;给定 n 个一类区间 (l1,i,r1,i)。&lt;/p&gt;
&lt;p&gt;给定 m 个二类区间 (l2,i,r2,i</summary>
      
    
    
    
    
    <category term="贪心算法" scheme="http://baiyi-ing.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ACwing4394-最长连续子序列</title>
    <link href="http://baiyi-ing.github.io/2022/04/03/ACwing/ACwing4394-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://baiyi-ing.github.io/2022/04/03/ACwing/ACwing4394-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2022-04-03T08:03:14.000Z</published>
    <updated>2022-04-04T17:00:11.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详细题目"><a href="#详细题目" class="headerlink" title="详细题目"></a>详细题目</h1><p><a href="https://www.acwing.com/problem/content/4397/">ACwing4394最长连续子序列</a></p><p>给定一个长度为 n 的整数序列 a1,a2,…</p><p>请你找出它的一个最长<strong>连续</strong>子序列，要求该子序列包含不超过 k 个不同的值。</p><p><strong>输入格式</strong></p><p>第一行包含两个整数 n,k</p><p>第二行包含 nn 个整数 a1,a2,…</p><p><strong>输出格式</strong></p><p>共一行，两个整数 l,r 表示你找出的满足条件的最长连续子序列的最左端元素下标和最右端元素下标。</p><p>如果答案不唯一，输出任意合理方案均可。</p><p><strong>数据范围</strong></p><p>前 66 个测试点满足 1≤k≤n≤10<br>所有测试点满足 1≤k≤n≤5×10^5, 0≤ai≤10^6</p><p><strong>输入样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 5</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9 3</span><br><span class="line">6 5 1 2 3 2 1 4 5</span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 7</span><br></pre></td></tr></table></figure><p><strong>输入样例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 1</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p><strong>输出样例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br></pre></td></tr></table></figure><h1 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h1><ol><li>看清题目意思，不同的数只要小于等于k个</li><li>连续不是指递增，不需要选取的数是者递增的</li><li>就是找k个不同的数，看他们如何组成相应的数</li></ol><h1 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断该数有没有出现过</span></span><br><span class="line">        <span class="type">int</span>[] cont = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1000010</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            arr[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//双指针判断l和r的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">1</span>,l=<span class="number">1</span>,max = <span class="number">0</span>,num = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>,end = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;k)&#123;</span><br><span class="line">                <span class="comment">//当窗口中已经有k个数的时候</span></span><br><span class="line">                <span class="comment">//当左端数只出现过一次后，直接去掉左端此数，继续向下一步判断</span></span><br><span class="line">                <span class="keyword">if</span>(cont[arr[l]] == <span class="number">1</span>)&#123;num--;&#125;</span><br><span class="line">                cont[arr[l]]--;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//若没有满足有k个数</span></span><br><span class="line">                <span class="keyword">if</span>(cont[arr[r]]==<span class="number">0</span>)&#123;num++;&#125;</span><br><span class="line">                cont[arr[r]]++;</span><br><span class="line">                <span class="keyword">if</span>(num&lt;=k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(max&lt;r-l)&#123;</span><br><span class="line">                        max = r-l;</span><br><span class="line">                        start = l;</span><br><span class="line">                        end = r;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(start+<span class="string">&quot; &quot;</span>+end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详细题目&quot;&gt;&lt;a href=&quot;#详细题目&quot; class=&quot;headerlink&quot; title=&quot;详细题目&quot;&gt;&lt;/a&gt;详细题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/4397/&quot;&gt;ACwing4</summary>
      
    
    
    
    
    <category term="双指针" scheme="http://baiyi-ing.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>POJ1011-Sticks</title>
    <link href="http://baiyi-ing.github.io/2022/04/01/POJ/POJ1011-Sticks/"/>
    <id>http://baiyi-ing.github.io/2022/04/01/POJ/POJ1011-Sticks/</id>
    <published>2022-03-31T20:03:34.000Z</published>
    <updated>2022-04-01T00:54:33.877Z</updated>
    
    <content type="html"><![CDATA[<p><strong>来源</strong></p><p><a href="https://www.acwing.com/problem/content/description/169/">ACwing167-木棒</a></p><p><a href="http://poj.org/problem?id=1011">POJ1011-Sticks</a></p><h1 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h1><p>本题被称为是剪枝神题之一，因为剪枝角度多达5种，且难以想象。常规的深搜，普通剪枝无法完成此题很有可能会导致超时。</p><h1 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h1><p>剪枝五种方法列举</p><hr><ol><li>从大到小排列数组（我们优先使用较长的短木棒，这样可以避免出现类似10&#x3D;2+3+5，及明明可以用一根却用了三根短木棒的情况）</li><li>木棒内部编号递增，帮助递归下标管理</li><li>在爆搜过程中，如果任意大木棒的<strong>第一个短木棍</strong>在进行了DFS爆搜后，显示这个短木棒<strong>不能匹配成指定长度len</strong>，但每条短木棍是一定要用的，所以只能说明这个len不满足题意，返回false</li><li>在爆搜过程中，如果任意大木棒的加了<strong>最后一块需要的短木</strong>棒在进行了DFS爆搜后，<strong>虽然当前小木棒加上后可以匹配一个完整的大木棒</strong>，但显示不能匹配，说明在接下来的爆搜过程中有<strong>则后面至少有一根大木棍不能用短木棒匹配成len</strong>，所以当前len依旧不满足题意，返回false</li><li>不能匹配后，则跳过所以相等的木棍长度，因为一样的长度同样通不过匹配</li></ol><h1 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h1><p><strong>java代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n,sum = <span class="number">0</span>,len;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] arr,visit;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//输入木棍个数，当n为0时结束</span></span><br><span class="line">            n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            visit = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="type">int</span> m;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                m = scanner.nextInt();</span><br><span class="line">                <span class="comment">//长度不大于50if(m&gt;50)&#123;continue;&#125;</span></span><br><span class="line">                arr[i] = m;</span><br><span class="line">                <span class="comment">//计算总和</span></span><br><span class="line">                sum+=arr[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//递增排列短木棍</span></span><br><span class="line">            Arrays.sort(arr);</span><br><span class="line">            <span class="comment">//二分递减排列短木棍</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>,r=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                arr[l] = arr[l]+arr[r];</span><br><span class="line">                arr[r] = arr[l] - arr[r];</span><br><span class="line">                arr[l] = arr[l] - arr[r];</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//逐个排列可能性,从最长的木棍长度开始</span></span><br><span class="line">            <span class="keyword">for</span> (len = arr[<span class="number">0</span>];len &lt;= sum/<span class="number">2</span>; len++) &#123;</span><br><span class="line">                <span class="comment">//当sum/len为整数时，说明有可能被拼凑出来,使用DFS判定</span></span><br><span class="line">                <span class="keyword">if</span>(sum%len == <span class="number">0</span>&amp;&amp;DFS(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)==<span class="literal">true</span>)&#123;</span><br><span class="line">                    System.out.println(len);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(len&gt;sum/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="comment">//只有一根木棍的情况下，最小长度为sum</span></span><br><span class="line">                System.out.println(sum);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> lon,<span class="type">int</span> index,<span class="type">int</span> num)</span>&#123;<span class="comment">//分别表示：当前木大棒长度，当前短木棒下标，当前大木棒个数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当大木棒个数乘当前目测长度等于总长时，返回ture</span></span><br><span class="line">        <span class="keyword">if</span>(num * len == sum)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当当前木棒长度为预测大棒长度时，说明已经找到一个木棒了,DFS寻找下一个木棒</span></span><br><span class="line">        <span class="keyword">if</span>(lon == len)&#123;<span class="keyword">return</span> DFS(<span class="number">0</span>,<span class="number">0</span>,num+<span class="number">1</span>);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//若当前的小木棍已经被用过,或当遍历的小木棍加上当前的木棍长度后大于len，则跳过继续</span></span><br><span class="line">            <span class="keyword">if</span>(visit[i] == <span class="number">0</span>&amp;&amp;lon+arr[i]&lt;=len)&#123;</span><br><span class="line"></span><br><span class="line">                visit[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(DFS(lon+arr[i],i+<span class="number">1</span>,num))&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">                visit[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果当前是要放入的第一根短木棒，就放入出错出现问题，则此len无法满足条件，返回false</span></span><br><span class="line">                <span class="comment">//说明在前面一轮的DFS中，没有短木棒能和这个初始短木棒组成长度为len的大木棒，但这个木棒是不能跳过的,我迟早要用这个长度的短木棒组成木棒的</span></span><br><span class="line">                <span class="comment">//因为就算跳过，在后面也要使用他和其它木棒组合，所以认定这个len不能被满足</span></span><br><span class="line">                <span class="keyword">if</span>(lon == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果是放入最后一节短木棒就放入出错，则此len无法满足条件，返回false</span></span><br><span class="line">                <span class="comment">//当发现前面的DFS并没有让lon+arr[i]=len这一看似可以通过的数据通过</span></span><br><span class="line">                <span class="comment">// 说明当前这一根大木棒虽然能凑成，但后面总有一根木棒他凑不出来</span></span><br><span class="line">                <span class="keyword">if</span>(lon+arr[i] == len)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//跳过所有相等的木棍,因为当前的木棒已经失败了，相同的长度同样会失败</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (j&lt; n &amp;&amp; arr[i] == arr[j])&#123;j++;&#125;</span><br><span class="line">                i = j-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若到了最后一个要拼凑的小木棍无法找到，则这种方法不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>c++代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">70</span>;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> len,n,sum;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> s,<span class="type">int</span> start)</span><span class="comment">//u表示多少个大木棒，s表示当前大木棒的长度,start表示木棒的下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u * len == sum) <span class="comment">//当前大木棒个数乘大木棒长度等于所有木棒总和，代表已经找到答案了，返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(s == len) <span class="comment">//已经找到一个小木棒了，小木棒个数加1，递归搜索下一个小木棒</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(u + <span class="number">1</span>, <span class="number">0</span> ,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = start; i &lt; n; i ++ )<span class="comment">//答案是个组合数，不是排列数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i] &amp;&amp; s + w[i] &lt;= len)<span class="comment">//可行性剪枝，当前木棒之前没被用过，或者当前大木棒总长度加上小木棒长度小于等于len</span></span><br><span class="line">        &#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(u, s + w[i], i + <span class="number">1</span>))<span class="comment">//判断当前木棒是否能放下</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//当前木棒能放到当前位置</span></span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果程序运行到这，代表当前小木棒不能放到这个位置</span></span><br><span class="line">            <span class="keyword">if</span>(s == <span class="number">0</span>) <span class="comment">//代表当前木棒为大木棒的第一个失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(s + w[i] == len)<span class="comment">//放到最后一个位置也失败了</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> j = i + <span class="number">1</span>;<span class="comment">//如果i失败了,那么长度跟i一样的棍子也一定失败</span></span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; w[i] == w[j]) j++;</span><br><span class="line">            i = j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//枚举完了还没有成功,就返回失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;w[i];</span><br><span class="line">            sum+=w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">sort</span>(w,w+n);</span><br><span class="line">        <span class="built_in">reverse</span>(w,w+n);<span class="comment">//从大到小排序，优化搜索顺序</span></span><br><span class="line">        </span><br><span class="line">        len = w[<span class="number">0</span>];<span class="comment">//从最大的那个木棒开始，因为不可能有一个大木棒比一个小木棒还小</span></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;=sum/<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum % len != <span class="number">0</span>)<span class="comment">//可行性剪枝，答案肯定是总和的约数</span></span><br><span class="line">            &#123;</span><br><span class="line">                len++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">                cout &lt;&lt; len &lt;&lt;endl;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="comment">//还没找到答案，所以答案只能是所有木棒长度总和</span></span><br><span class="line">            cout &lt;&lt; sum &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;来源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/description/169/&quot;&gt;ACwing167-木棒&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.</summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="剪枝" scheme="http://baiyi-ing.github.io/tags/%E5%89%AA%E6%9E%9D/"/>
    
  </entry>
  
  <entry>
    <title>hexo版本踩坑大赏</title>
    <link href="http://baiyi-ing.github.io/2022/03/31/hexo%E7%89%88%E6%9C%AC%E8%B8%A9%E5%9D%91%E5%A4%A7%E8%B5%8F/"/>
    <id>http://baiyi-ing.github.io/2022/03/31/hexo%E7%89%88%E6%9C%AC%E8%B8%A9%E5%9D%91%E5%A4%A7%E8%B5%8F/</id>
    <published>2022-03-31T05:48:23.000Z</published>
    <updated>2022-04-04T17:00:29.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="报错大赏"><a href="#报错大赏" class="headerlink" title="报错大赏"></a>报错大赏</h1><p><strong>FATAL YAMLException: Specified list of YAML types (or a single Type object) contains a non-Type object.</strong></p><p><img src="https://s2.loli.net/2022/03/29/OpZdiFMIQTzrJPW.png" alt="image.png"></p><p>然后笔者追根溯源发现是一个类型报错，笔者在想是不是因为自己在主题中添加更改了部分功能所导致的，然后再网上疯狂的翻找，发现并没有相关报错解析，后来加了一个大佬云集的群，他们说不是我的原因，<strong>是hexo与nodejs的版本配置原因</strong>，这一下打消了我的顾虑，结束了笔者的自我怀疑。</p><p>然后！笔者开始了<strong>不停换版本改路径，换版本改路径</strong>之旅</p><p>然后当版本换好了之后，笔者发现还是报了一样的错误！！！！</p><p>笔者继续了她的崩溃之旅┭┮﹏┭┮   ┭┮﹏┭┮   ┭┮﹏┭┮</p><p>然后她决定<strong>摆烂</strong>了！对的，你没有听错她<strong>摆烂</strong>了！<strong>摆烂</strong>了！</p><p>当然她的自我怀疑只可能是暂时的，她决定一切从0开始了</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>找到合适版本</p><p>node使用的是16.14.2版本    （这个建议到官网下载）<img src="https://s2.loli.net/2022/03/31/FDxbBQGNusfV9ng.png" alt="image-20220331110831581"></p><p>笔者这里安装的hexo是5.4.1版本</p><p><img src="C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20220331110507169.png" alt="image-20220331110507169"></p></li><li><p>迁移博客</p><p>为什么会有这一步呢？因为笔者决定开一个新的博客，后来发现我其实只要开一个新的博客文件，然后将以前的必要内容迁移过来就可以了，这个就是<a href="https://www.cnblogs.com/iHeling/p/14095937.html">最终解决方案</a>。</p><p>但是会有一个问题，你会发现hexo d指令无法使用，这个时候你要想办法找到自己曾经的.ssh文件，复制粘贴里面的内容到上传密钥GitHub中</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;报错大赏&quot;&gt;&lt;a href=&quot;#报错大赏&quot; class=&quot;headerlink&quot; title=&quot;报错大赏&quot;&gt;&lt;/a&gt;报错大赏&lt;/h1&gt;&lt;p&gt;&lt;st</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://baiyi-ing.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>POJ1699-DNA</title>
    <link href="http://baiyi-ing.github.io/2022/03/29/POJ/POJ1699-DNA/"/>
    <id>http://baiyi-ing.github.io/2022/03/29/POJ/POJ1699-DNA/</id>
    <published>2022-03-29T08:15:13.000Z</published>
    <updated>2022-03-29T09:02:36.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="POJ1699-DNA"><a href="#POJ1699-DNA" class="headerlink" title="POJ1699-DNA"></a><a href="http://poj.org/problem?id=1699">POJ1699-DNA</a></h1><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><ol><li><p>本题使用<strong>预处理路径增加长度</strong>的办法来解题</p><p>具体为：设立一个二维数组，来存取i，j字符顺序排列下</p><p>​                算出i，j的长度的重叠部分，然后再用<strong>j - 重叠部分</strong>算出所需要增加的长度</p></li><li><p>使用<strong>DFS</strong>来深度搜索最小值</p></li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> [][] arr;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String [] d;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] visit ;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> minLen,all=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//输入计算次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> n ;</span><br><span class="line">        <span class="keyword">while</span>(m--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//输入片段数量</span></span><br><span class="line">            n = scanner.nextInt();</span><br><span class="line">            <span class="comment">//创建二维数组保存两者之间的重叠区域字母数量</span></span><br><span class="line">             arr = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">             <span class="comment">//创建一维数组，保存每个字符串</span></span><br><span class="line">             d = <span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">             visit = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="comment">//输入DNA片段数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                d[i] = scanner.next();</span><br><span class="line">                all+=d[i].length();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//初始化arr中的数据，列举出每一个数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//当数据自我重叠时跳过</span></span><br><span class="line">                    <span class="keyword">if</span>(i == j)&#123;</span><br><span class="line">                        <span class="comment">//System.out.print(arr[i][j]+ &quot; &quot;)</span></span><br><span class="line">                        ;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                    <span class="comment">//初始化片段值增加值</span></span><br><span class="line">                    add(i,j);</span><br><span class="line">                    <span class="comment">//System.out.print( arr[i][j]+ &quot; &quot;);</span></span><br><span class="line">                &#125;</span><br><span class="line">               <span class="comment">// System.out.println();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//初始化最优解</span></span><br><span class="line">            minLen = all+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//使用DFS爆搜剪枝</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                visit[i] = <span class="number">1</span>;</span><br><span class="line">                DFS(n,<span class="number">1</span>,d[i].length(),i);</span><br><span class="line">                visit[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(minLen);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化压缩数据函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="comment">//选取较小长度为当前的长度限制</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.min(d[i].length(),d[j].length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> len; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(;h&lt;k;h++)&#123;</span><br><span class="line">                <span class="comment">//当匹配</span></span><br><span class="line">                <span class="keyword">if</span> (d[i].charAt(d[i].length()-k+h)!=d[j].charAt(h))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(h == k)&#123;</span><br><span class="line">                arr[i][j] = d[j].length()-k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//爆搜剪枝计算最短长度,n为总个数，m为使用个数，len为当前长度,now为上一个的下标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> len,<span class="type">int</span> now)</span>&#123;</span><br><span class="line">        <span class="comment">//当当前值已经大于等于已经得到的最小值，则进行剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(len&gt;minLen)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(n == m)&#123;</span><br><span class="line">            minLen =Math.min(len,minLen);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(visit[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                visit[i] = <span class="number">1</span>;</span><br><span class="line">                DFS(n,m+<span class="number">1</span>,len+arr[now][i],i);</span><br><span class="line">                visit[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;POJ1699-DNA&quot;&gt;&lt;a href=&quot;#POJ1699-DNA&quot; class=&quot;headerlink&quot; title=&quot;POJ1699-DNA&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=1699&quot;&gt;POJ1699-DNA&lt;</summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="压缩" scheme="http://baiyi-ing.github.io/tags/%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>牛客小白月赛-C英文作文</title>
    <link href="http://baiyi-ing.github.io/2022/03/25/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B-C%E8%8B%B1%E6%96%87/"/>
    <id>http://baiyi-ing.github.io/2022/03/25/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B-C%E8%8B%B1%E6%96%87/</id>
    <published>2022-03-25T12:54:24.000Z</published>
    <updated>2022-03-29T04:49:52.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英文作文"><a href="#英文作文" class="headerlink" title="英文作文"></a><a href="https://ac.nowcoder.com/acm/contest/11223/C">英文作文</a></h1><h2 id="详细题目"><a href="#详细题目" class="headerlink" title="详细题目"></a>详细题目</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/11223/C">https://ac.nowcoder.com/acm/contest/11223/C</a><br>来源：牛客网</p><p>时间限制：C&#x2F;C++ 1秒，其他语言2秒<br>            空间限制：C&#x2F;C++ 262144K，其他语言524288K<br>             64bit IO Format: %lld</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>  在写英语作文的时候，两个相同单词靠的太近肯定不好。现在 ZHR 给了你一段nnn个单词的英文，问你有多少对相同单词中间间隔的单词数小于等于kkk 。 </p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一行两个整数，为n和k 。</span><br><span class="line"></span><br><span class="line">第二行n个由仅小写字母组成的单词。每个单词长度小于等于10 。</span><br><span class="line">1≤k≤n≤105</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一行一个正整数，表示有多少对单词中间间隔的单词数小于等于kkk 。</span><br></pre></td></tr></table></figure><p> 示例1                        </p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11 2</span><br><span class="line">i love you you love mi mixue ice cream and tea</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有 you 和 love 两个单词间隔的单词数小于等于222</span><br></pre></td></tr></table></figure><p> 示例2                        </p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 2</span><br><span class="line">a a a a a a a a a a</span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><ol><li>本题使用暴力解法超时，笔者因为暴力而罚时-3</li><li>本题宜采取<strong>哈希表+滑动窗口</strong>的模式，来计算合法范围内的相同对数</li><li>使用<strong>res+&#x3D;此字符串出现次数-1</strong>的方式，来计算此字符在范围内的出现次数</li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt;q;</span><br><span class="line">string s[N];</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    k+=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;s[i];</span><br><span class="line">    LL res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=k) </span><br><span class="line">        &#123;</span><br><span class="line">            q[s[i]]++;</span><br><span class="line">            <span class="keyword">if</span>(q[s[i]]&gt;<span class="number">1</span>) res+=q[s[i]]<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当余下的长度，或本来的长度大于k，使用滑动窗口算法</span></span><br><span class="line">            <span class="comment">//记录开头的数字s[i-k]个数减一在窗口数组中，相当于向右滑动的初始</span></span><br><span class="line">            q[s[i-k]]--;</span><br><span class="line">            <span class="comment">//记录结尾的数字s[i]个数加一在窗口数组中，相当于向右滑动结尾</span></span><br><span class="line">            q[s[i]]++;</span><br><span class="line">            <span class="comment">//s[i]的数目大于1时，则窗口范围内数组对数个数为s[i]的数目减一</span></span><br><span class="line">            <span class="keyword">if</span>(q[s[i]]&gt;<span class="number">1</span>) res+=q[s[i]]<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;英文作文&quot;&gt;&lt;a href=&quot;#英文作文&quot; class=&quot;headerlink&quot; title=&quot;英文作文&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/11223/C&quot;&gt;英文作文&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    
    <category term="滑动窗口" scheme="http://baiyi-ing.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
    <category term="哈希表" scheme="http://baiyi-ing.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>ACwing3370-牛年</title>
    <link href="http://baiyi-ing.github.io/2022/03/18/ACwing/ACwing3370-%E7%89%9B%E5%B9%B4/"/>
    <id>http://baiyi-ing.github.io/2022/03/18/ACwing/ACwing3370-%E7%89%9B%E5%B9%B4/</id>
    <published>2022-03-18T10:10:24.000Z</published>
    <updated>2022-03-21T20:27:47.419Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/description/3373/">acwing3370. 牛年</a></p><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>Farmer John 的奶牛们得知最近正在庆祝牛年的到来时十分兴奋。</p><p>牛年总是奶牛们的最爱。</p><p>我们知道，中国历法中每一年所对应的生肖遵循 12年的周期：<code>Ox, Tiger, Rabbit, Dragon, Snake, Horse, Goat, Monkey, Rooster, Dog, Pig, Rat</code>（牛、虎、兔、龙、蛇、马、羊、猴、鸡、狗、猪、鼠），然后回到牛。</p><p>奶牛 Bessie 自豪地说她是在许多年前的一个牛年出生的。</p><p>她的朋友 Elsie 想要知道她与 Bessie 出生相差多少年，并且希望你能够通过查看农场上若干奶牛出生年份之间的关系来帮助她推算。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个整数 NN。</p><p>以下 N 行<strong>每行包含一个 8 个单词的短语</strong>，指定了两头奶牛的出生年份之间的关系，格式为 <code>Mildred born in previous Dragon year from Bessie</code>（Mildred 在 Bessie 出生的前一个龙年出生），或 <code>Mildred born in next Dragon year from Bessie</code>（Mildred 在 Bessie 出生的后一个龙年出生）。</p><p>最后一个单词是农场上某一头奶牛的名字，为 “Bessie” 或一头已经在之前的输入中出现过的奶牛。</p><p>第一个单词是农场上某一头奶牛的名字，不为 “Bessie” 且未在之前的输入中出现过。</p><p>所有的奶牛名字不超过 10 个字符，且仅包含字符 a..z 或 A..Z。</p><p>第 5 个单词是上述十二生肖之一。</p><p>第 4 个单词是 <code>previous</code>（之前）或 <code>next</code>（之后）之一。</p><p>例如，如果短语为 <code>Mildred born in previous Dragon year from Bessie</code>，则 Mildred 的出生年份为最为接近且严格处于 Bessie 的出生年份之前（不等于）的龙年。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出 Bessie 和 Elsie 的出生年份之间相差的年数。输入保证可以通过给定的信息求出结果。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤N≤1001≤N≤100</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">Mildred born in previous Dragon year from Bessie</span><br><span class="line">Gretta born in previous Monkey year from Mildred</span><br><span class="line">Elsie born in next Ox year from Gretta</span><br><span class="line">Paulina born in next Dog year from Bessie</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>在以上的输入中，</p><ul><li>Elsie 在 Bessie 之前 12 年出生。</li><li>Mildred 在 Bessie 之前 9 年出生。</li><li>Gretta 在 Bessie 之前 17 年出生。</li><li>Paulina 在 Bessie 之后 9 年出生。</li></ul><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><p>本题笔者采用哈希表来存储</p><p>1） 生肖名称与生肖顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存入每个年份，并给每个年份编号</span></span><br><span class="line">       Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;Ox&quot;</span>, <span class="number">0</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Tiger&quot;</span>, <span class="number">1</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Rabbit&quot;</span>, <span class="number">2</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Dragon&quot;</span>, <span class="number">3</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Snake&quot;</span>, <span class="number">4</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Horse&quot;</span>, <span class="number">5</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Goat&quot;</span>, <span class="number">6</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Monkey&quot;</span>, <span class="number">7</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Rooster&quot;</span>, <span class="number">8</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Dog&quot;</span>, <span class="number">9</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Pig&quot;</span>, <span class="number">10</span>);</span><br><span class="line">       map.put(<span class="string">&quot;Rat&quot;</span>, <span class="number">11</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>每个人的<strong>名字</strong>与相对于Bessie的<strong>年纪</strong>（Bessie默认为0岁）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以Bessie的年龄为坐标轴中点，为0岁</span></span><br><span class="line">       Map&lt;String,Integer&gt; ages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       ages.put(<span class="string">&quot;Bessie&quot;</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ages.put(s[i][<span class="number">0</span>],age);</span><br></pre></td></tr></table></figure><ol start="3"><li>也可以利用哈希表来存储每个人的<strong>名字与生肖</strong>，但这里笔者利用已经<strong>提前存好的年纪与生肖编号</strong>来计算生肖</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用后一个人的年纪，定位后一个人的生肖下标</span></span><br><span class="line">           year = ages.get(s[i][<span class="number">7</span>])%<span class="number">12</span>;</span><br><span class="line">           <span class="keyword">if</span>(year &lt; <span class="number">0</span>)&#123;year += <span class="number">12</span>;&#125;</span><br><span class="line">           <span class="comment">//后一个人 - 前一个人 的差</span></span><br><span class="line">           age = year -  map.get(s[i][<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//存入每个年份，并给每个年份编号</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;Ox&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Tiger&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Rabbit&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Dragon&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Snake&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Horse&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Goat&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Monkey&quot;</span>, <span class="number">7</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Rooster&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Dog&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Pig&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Rat&quot;</span>, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="comment">//以Bessie的年龄为坐标轴中点，为0岁</span></span><br><span class="line">        Map&lt;String,Integer&gt; ages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        ages.put(<span class="string">&quot;Bessie&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//逐个输入，利用后一个人的生肖与年纪</span></span><br><span class="line">        <span class="comment">// 与前一个人的生肖判断前一个人的年纪（相对于Bessie的）</span></span><br><span class="line">        String[][] s = <span class="keyword">new</span> <span class="title class_">String</span>[n][<span class="number">8</span>];<span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>,year;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                s[i][j] = scanner.next();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//利用后一个人的年纪，定位后一个人的生肖下标</span></span><br><span class="line">            year = ages.get(s[i][<span class="number">7</span>])%<span class="number">12</span>;</span><br><span class="line">            <span class="keyword">if</span>(year &lt; <span class="number">0</span>)&#123;year += <span class="number">12</span>;&#125;</span><br><span class="line">            <span class="comment">//后一个人 - 前一个人 的差</span></span><br><span class="line">            age = year -  map.get(s[i][<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s[i][<span class="number">3</span>].equals(<span class="string">&quot;previous&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//后一个人，比前一个人小，当生肖差大于0时，两人年纪差为age</span></span><br><span class="line">                <span class="keyword">if</span>(age&gt;<span class="number">0</span>)&#123;age = ages.get(s[i][<span class="number">7</span>])-age;&#125;</span><br><span class="line">                <span class="comment">//当生肖差，小于等于0时，说明两人年纪差为（12+age）</span></span><br><span class="line">                <span class="keyword">else</span> &#123; age = ages.get(s[i][<span class="number">7</span>]) - <span class="number">12</span> - age;&#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//后一个人，比前一个人大，当生肖差大于等于0时，两人年纪差为（12-age）</span></span><br><span class="line">                 <span class="keyword">if</span>(age&gt;=<span class="number">0</span>)&#123;age = ages.get(s[i][<span class="number">7</span>]) + <span class="number">12</span> - age;&#125;</span><br><span class="line">                 <span class="comment">//当生肖差，小于0时，说明两人年纪差为age</span></span><br><span class="line">                 <span class="keyword">else</span> &#123; age = ages.get(s[i][<span class="number">7</span>])-age ;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//System.out.println(s[i][0]+&quot; &quot;+age);</span></span><br><span class="line">            ages.put(s[i][<span class="number">0</span>],age);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Math.abs(ages.get(<span class="string">&quot;Elsie&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/description/3373/&quot;&gt;acwing3370. 牛年&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目详情&quot;&gt;&lt;a href=&quot;#题目详情&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="哈希表" scheme="http://baiyi-ing.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>力扣2044-统计按位或能得到最大值的子集数目</title>
    <link href="http://baiyi-ing.github.io/2022/03/15/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A32044-%E7%BB%9F%E8%AE%A1%E6%8C%89%E4%BD%8D%E6%88%96%E8%83%BD%E5%BE%97%E5%88%B0%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84%E5%AD%90%E9%9B%86%E6%95%B0%E7%9B%AE/"/>
    <id>http://baiyi-ing.github.io/2022/03/15/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A32044-%E7%BB%9F%E8%AE%A1%E6%8C%89%E4%BD%8D%E6%88%96%E8%83%BD%E5%BE%97%E5%88%B0%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84%E5%AD%90%E9%9B%86%E6%95%B0%E7%9B%AE/</id>
    <published>2022-03-15T12:10:11.000Z</published>
    <updated>2022-03-21T20:27:47.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><strong>难度中等</strong></p><p>给你一个整数数组 <code>nums</code> ，请你找出 <code>nums</code> 子集 <strong>按位或</strong> 可能得到的 <strong>最大值</strong> ，并返回按位或能得到最大值的 <strong>不同非空子集的数目</strong> 。</p><p>如果数组 <code>a</code> 可以由数组 <code>b</code> 删除一些元素（或不删除）得到，则认为数组 <code>a</code> 是数组 <code>b</code> 的一个 <strong>子集</strong> 。如果选中的元素下标位置不一样，则认为两个子集 <strong>不同</strong> 。</p><p>对数组 <code>a</code> 执行 <strong>按位或</strong> ，结果等于 <code>a[0] **OR** a[1] **OR** ... **OR** a[a.length - 1]</code>（下标从 <strong>0</strong> 开始）。</p><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,1]</span><br><span class="line">输出：2</span><br><span class="line">解释：子集按位或能得到的最大值是 3 。有 2 个子集按位或可以得到 3 ：</span><br><span class="line">- [3]</span><br><span class="line">- [3,1]</span><br></pre></td></tr></table></figure><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,2]</span><br><span class="line">输出：7</span><br><span class="line">解释：[2,2,2] 的所有非空子集的按位或都可以得到 2 。总共有 23 - 1 = 7 个子集。</span><br></pre></td></tr></table></figure><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><strong>示例 3：</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1,5]</span><br><span class="line">输出：6</span><br><span class="line">解释：子集按位或可能的最大值是 7 。有 6 个子集按位或可以得到 7 ：</span><br><span class="line">- [3,5]</span><br><span class="line">- [3,1,5]</span><br><span class="line">- [3,2,5]</span><br><span class="line">- [3,2,1,5]</span><br><span class="line">- [2,5]</span><br><span class="line">- [2,1,5]</span><br></pre></td></tr></table></figure><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a><strong>提示：</strong></h2><ul><li><code>1 &lt;= nums.length &lt;= 16</code></li><li><code>1 &lt;= nums[i] &lt;= 105</code></li></ul><hr><h1 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h1><ol><li>找到最大异或数，<strong>直接全部异或</strong>方可找到</li><li>问题规模不变，<strong>问题处理情况却只有两种</strong>，一种是有当前数，一种是无当前数，我们利用DFS暴力搜索其可能性</li></ol><h1 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countMaxOrSubsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//计算出最大的异或值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num:nums) &#123;</span><br><span class="line">            max |= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进入DFS暴搜</span></span><br><span class="line">        DFS(<span class="number">0</span>,<span class="number">0</span>,nums,max);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n,<span class="type">int</span>[] nums,<span class="type">int</span> max)</span>&#123;</span><br><span class="line">         <span class="comment">//m表示当前遍历到的数的个数，n表示当前的数值</span></span><br><span class="line">        <span class="keyword">if</span>(m == nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n == max)&#123;ans++;&#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//异或当前值</span></span><br><span class="line">        DFS(m+<span class="number">1</span>,n|nums[m],nums,max);</span><br><span class="line">        <span class="comment">//不异或当前值</span></span><br><span class="line">        DFS(m+<span class="number">1</span>,n,nums,max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="来源与结果"><a href="#来源与结果" class="headerlink" title="来源与结果"></a>来源与结果</h1><p><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/">2044. 统计按位或能得到最大值的子集数目</a></p><p><img src="https://s2.loli.net/2022/03/15/XZPFxiIhGm9UbWg.png" alt="image-20220315203028578"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;难度中等&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，请你找出 </summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>ACwing2060-奶牛选美</title>
    <link href="http://baiyi-ing.github.io/2022/03/14/ACwing/ACwing2060-%E5%A5%B6%E7%89%9B%E9%80%89%E7%BE%8E/"/>
    <id>http://baiyi-ing.github.io/2022/03/14/ACwing/ACwing2060-%E5%A5%B6%E7%89%9B%E9%80%89%E7%BE%8E/</id>
    <published>2022-03-14T12:49:34.000Z</published>
    <updated>2022-03-21T20:27:47.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACwing2060-奶牛选美"><a href="#ACwing2060-奶牛选美" class="headerlink" title="ACwing2060-奶牛选美"></a><a href="https://www.acwing.com/problem/content/2062/">ACwing2060-奶牛选美</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>听说最近两斑点的奶牛最受欢迎，约翰立即购进了一批两斑点牛。</p><p>不幸的是，时尚潮流往往变化很快，当前最受欢迎的牛变成了一斑点牛。</p><p>约翰希望通过给每头奶牛涂色，使得它们身上的两个斑点能够合为一个斑点，让它们能够更加时尚。</p><p>牛皮可用一个 N×MN×M 的字符矩阵来表示，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">................</span><br><span class="line">..XXXX....XXX...</span><br><span class="line">...XXXX....XX...</span><br><span class="line">.XXXX......XXX..</span><br><span class="line">........XXXXX...</span><br><span class="line">.........XXX....</span><br></pre></td></tr></table></figure><p>其中，XX 表示斑点部分。</p><p>如果两个 XX 在垂直或水平方向上相邻（对角相邻不算在内），则它们属于同一个斑点，由此看出上图中恰好有两个斑点。</p><p>约翰牛群里<strong>所有的牛都有两个斑点</strong>。</p><p>约翰希望通过使用油漆给奶牛尽可能少的区域内涂色，将两个斑点合为一个。</p><p>在上面的例子中，他只需要给三个 .. 区域内涂色即可（新涂色区域用 ∗ 表示）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">................</span><br><span class="line">..XXXX....XXX...</span><br><span class="line">...XXXX*...XX...</span><br><span class="line">.XXXX..**..XXX..</span><br><span class="line">........XXXXX...</span><br><span class="line">.........XXX....</span><br></pre></td></tr></table></figure><p>请帮助约翰确定，为了使两个斑点合为一个，他需要涂色区域的最少数量。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个整数 N 和 M。</p><p>接下来 N 行，每行包含一个长度为 M 的由 X 和 .. 构成的字符串，用来表示描述牛皮图案的字符矩阵。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出需要涂色区域的最少数量。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤N,M≤50</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 16</span><br><span class="line">................</span><br><span class="line">..XXXX....XXX...</span><br><span class="line">...XXXX....XX...</span><br><span class="line">.XXXX......XXX..</span><br><span class="line">........XXXXX...</span><br><span class="line">.........XXX....</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><h3 id="1-统计连通块的位置"><a href="#1-统计连通块的位置" class="headerlink" title="1. 统计连通块的位置"></a>1. 统计连通块的位置</h3><p>我们使用<a href="https://blog.csdn.net/qq_41759198/article/details/81501764?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-81501764.pc_agg_new_rank&utm_term=dfs%E7%90%86%E8%A7%A3%E4%B8%8D%E4%BA%86&spm=1000.2123.3001.4430">深度优先搜索算法</a>来，逐个统计每个连通块中的每个点的位置</p><h3 id="2-计算连通块的距离"><a href="#2-计算连通块的距离" class="headerlink" title="2. 计算连通块的距离"></a>2. 计算连通块的距离</h3><p>我们使用<a href="https://baike.baidu.com/item/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB/743092">曼哈顿距离</a>计算法，来找出让两联通块链接的最小路径值，为<strong>d(x,y)-1</strong></p><p><img src="https://s2.loli.net/2022/03/14/49CwLjbmI7N8GnO.png" alt="image.png"></p><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    static int N = 100;</span><br><span class="line">    static char[][] arr = new char[N][N];</span><br><span class="line">    static int k = 0,n,m;</span><br><span class="line">    static List&lt;Integer&gt;[] lists = new List[2];</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">         n = scanner.nextInt();</span><br><span class="line">         m = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        String s ;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">           s  = scanner.next();</span><br><span class="line">            for (int j = 0; j &lt; m; j++) &#123;</span><br><span class="line">                arr[i][j] = s.charAt(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //使用DFS记录下标</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; m; j++) &#123;</span><br><span class="line">                if(arr[i][j] == &#x27;X&#x27;)&#123;</span><br><span class="line">                    lists[k] = new ArrayList&lt;&gt;();</span><br><span class="line">                    DFS(i,j);</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //使用曼哈顿距离法计算</span><br><span class="line">        int min = Integer.MAX_VALUE,dis;</span><br><span class="line">        point p1 = new point();point p2 = new point();</span><br><span class="line">        for (int i = 0; i &lt; lists[0].size(); i++) &#123;</span><br><span class="line">            p1.x = lists[0].get(i)/1000;</span><br><span class="line">            p1.y = lists[0].get(i)%1000;</span><br><span class="line">            for (int j = 0; j &lt; lists[1].size(); j++) &#123;</span><br><span class="line">                p2.x = lists[1].get(j)/1000;</span><br><span class="line">                p2.y = lists[1].get(j)%1000;</span><br><span class="line">                dis = Math.abs(p1.x-p2.x)+Math.abs(p1.y-p2.y)-1;</span><br><span class="line">                min = Math.min(dis,min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //方向向量</span><br><span class="line">    static int[] dx = &#123;0,0,1,-1&#125;;</span><br><span class="line">    static int[] dy = &#123;1,-1,0,0&#125;;</span><br><span class="line">    static public void DFS(int x,int y)&#123;</span><br><span class="line">       //先将该店设置为已经标记</span><br><span class="line">        arr[x][y] =&#x27;.&#x27;;</span><br><span class="line">        lists[k].add(x*1000+y);</span><br><span class="line">       //向四周遍历</span><br><span class="line">        for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">            int a = dx[i]+x;</span><br><span class="line">            int b = dy[i]+y;</span><br><span class="line">            if(a&gt;=0&amp;&amp;b&gt;=0&amp;&amp;a&lt;n&amp;&amp;b&lt;m&amp;&amp;arr[a][b] ==&#x27;X&#x27;)&#123;</span><br><span class="line">                DFS(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class point&#123;</span><br><span class="line">    int x,y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ACwing2060-奶牛选美&quot;&gt;&lt;a href=&quot;#ACwing2060-奶牛选美&quot; class=&quot;headerlink&quot; title=&quot;ACwing2060-奶牛选美&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/c</summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="曼哈顿距离" scheme="http://baiyi-ing.github.io/tags/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>N皇后</title>
    <link href="http://baiyi-ing.github.io/2022/03/14/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/N%E7%9A%87%E5%90%8E/"/>
    <id>http://baiyi-ing.github.io/2022/03/14/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/N%E7%9A%87%E5%90%8E/</id>
    <published>2022-03-14T11:11:01.000Z</published>
    <updated>2022-03-21T20:27:47.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="N皇后"><a href="#N皇后" class="headerlink" title="N皇后"></a>N皇后</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><h4 id="力扣-51N-皇后"><a href="#力扣-51N-皇后" class="headerlink" title="力扣-51N 皇后"></a><a href="https://leetcode-cn.com/problems/n-queens/">力扣-51N 皇后</a></h4><h4 id="AcWing-843-n-皇后问题"><a href="#AcWing-843-n-皇后问题" class="headerlink" title="AcWing 843. n-皇后问题"></a><strong><a href="https://www.acwing.com/problem/content/845/">AcWing 843. n-皇后问题</a></strong></h4><h2 id="重点信息"><a href="#重点信息" class="headerlink" title="重点信息"></a>重点信息</h2><ol><li>皇后的个数、行数、列数总数相同，斜线总数为2n-1</li><li>所有皇后不能在同一行同一列同一斜线</li><li>要遍历出所有的可行摆放情况</li></ol><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><ol><li>可以设置三个一维boolean数组，分别用来封锁竖行，与两斜行。而横排则在传输中变换</li><li>使用DFS（<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224976?fromtitle=DFS&fromid=5055&fr=aladdin">深度优先搜索</a>），回溯遍历</li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><p><strong>力扣版本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">char</span>[][] ch; </span><br><span class="line">    List&lt;List&lt;String&gt;&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//三个bool函数分别表示列，正斜线和反斜线（共有2n-1条斜线）</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span>[] col = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="type">boolean</span>[] d = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">30</span>];</span><br><span class="line">    <span class="type">boolean</span>[] rd = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">30</span>];</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//初始化队列</span></span><br><span class="line">         ch = <span class="keyword">new</span> <span class="title class_">char</span>[n ][n ];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                ch[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//深度优先搜索</span></span><br><span class="line">        DFS(<span class="number">0</span>,n);</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//当搜索数字等于n时，则搜索完毕可以存入</span></span><br><span class="line">        <span class="keyword">if</span> (m==n)&#123;</span><br><span class="line">            <span class="comment">//将数据存入队列中</span></span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n ; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    s+=ch[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            lists.add(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">          <span class="comment">//遍历每行，m可以表示当前所在行数，i可以表示当前所在列数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n ; i++) &#123;</span><br><span class="line">            <span class="comment">//斜线的x与y的和与差总是固定的</span></span><br><span class="line">            <span class="comment">//则利用x+y判断正斜线是否被用，y-x判断反斜线是否被用加上N是防止溢出</span></span><br><span class="line">               <span class="keyword">if</span>(col[i] == <span class="literal">false</span> &amp;&amp; d[i+m] == <span class="literal">false</span> &amp;&amp; rd[n+i-m] == <span class="literal">false</span>)&#123;</span><br><span class="line">                   <span class="comment">//将此点变成皇后Q</span></span><br><span class="line">                   ch[m][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                   <span class="comment">//将此点的竖线，两斜线封锁</span></span><br><span class="line">                   col[i]=d[i+m]=rd[n+i-m]=<span class="literal">true</span>;</span><br><span class="line">                   <span class="comment">//继续向下一排遍历</span></span><br><span class="line">                   DFS(m+<span class="number">1</span>,n);</span><br><span class="line">                   <span class="comment">//遍历回溯后，回到曾经状态</span></span><br><span class="line">                   col[i]=d[i+m]=rd[n+i-m]=<span class="literal">false</span>;</span><br><span class="line">                   ch[m][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>acwing版本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//acwing版本</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**DFS求解n皇后的求解方法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">read</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="comment">//分别记录列，对角线与反对角线</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] col = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] dl = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] rdl = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">char</span>[][] arr = <span class="keyword">new</span> <span class="title class_">char</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        n = Integer.valueOf(read.readLine());</span><br><span class="line">        String temp ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                arr[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        DFS(<span class="number">0</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">DFS</span> <span class="params">(<span class="type">int</span> m)</span>&#123;</span><br><span class="line">        <span class="comment">//当n皇后排满,m是个数也是行数</span></span><br><span class="line">        <span class="keyword">if</span>(m==n)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                    System.out.println(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//若果m列，对角线，反对角线未被使用</span></span><br><span class="line">            <span class="comment">//判断x+y是否被用，y-x是否被用加上N是防止溢出</span></span><br><span class="line">            <span class="comment">// 因为两者相加与相减的大小是固定的</span></span><br><span class="line">            <span class="keyword">if</span>(!col[i] &amp;&amp; !dl[i+m] &amp;&amp; !rdl[n+i-m])&#123;</span><br><span class="line">                <span class="comment">//若未被占用则记录使用</span></span><br><span class="line">                col[i] = dl[i+m] = rdl[i-m+n-<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//将此点标记为Q</span></span><br><span class="line">                arr[m][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                DFS(m+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//回到曾经状态</span></span><br><span class="line">                col[i] = dl[i+m] = rdl[i-m+n-<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">                arr[m][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;N皇后&quot;&gt;&lt;a href=&quot;#N皇后&quot; class=&quot;headerlink&quot; title=&quot;N皇后&quot;&gt;&lt;/a&gt;N皇后&lt;/h1&gt;&lt;h2 id=&quot;题目来源&quot;&gt;&lt;a href=&quot;#题目来源&quot; class=&quot;headerlink&quot; title=&quot;题目来源&quot;&gt;&lt;/a&gt;题目来</summary>
      
    
    
    
    
    <category term="深度优先搜索" scheme="http://baiyi-ing.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>力扣-599两个列表的最小索引总和</title>
    <link href="http://baiyi-ing.github.io/2022/03/14/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3-599%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/"/>
    <id>http://baiyi-ing.github.io/2022/03/14/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3-599%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/</id>
    <published>2022-03-14T09:35:27.000Z</published>
    <updated>2022-03-21T20:27:47.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="599-两个列表的最小索引总和"><a href="#599-两个列表的最小索引总和" class="headerlink" title="599. 两个列表的最小索引总和"></a><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/">599. 两个列表的最小索引总和</a></h1><h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>假设 Andy 和 Doris 想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设答案总是存在。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: list1 = [&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]，list2 = [&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]</span><br><span class="line">输出: [&quot;Shogun&quot;]</span><br><span class="line">解释: 他们唯一共同喜爱的餐厅是“Shogun”。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入:list1 = [&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]，list2 = [&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]</span><br><span class="line">输出: [&quot;Shogun&quot;]</span><br><span class="line">解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= list1.length, list2.length &lt;= 1000</code></li><li><code>1 &lt;= list1[i].length, list2[i].length &lt;= 30</code> </li><li><code>list1[i]</code> 和 <code>list2[i]</code> 由空格 <code>&#39; &#39;</code> 和英文字母组成。</li><li><code>list1</code> 的所有字符串都是 <strong>唯一</strong> 的。</li><li><code>list2</code> 中的所有字符串都是 <strong>唯一</strong> 的</li></ul><h2 id="笔者解析"><a href="#笔者解析" class="headerlink" title="笔者解析"></a>笔者解析</h2><ol><li>首先我们需要找到他们所共同喜欢的餐厅我们利用HashMap进行存储与匹配</li><li>我们找到最小索引和是多少，我们利用以前HashMap存储其下标值，进行帮助比较，利用队列存储符合餐厅与清除不符合餐厅</li><li>确定符合最小索引总和的餐厅数目（利用队列的长度求索）</li><li>返回将队列转化为数组返回</li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String[] findRestaurant(String[] list1, String[] list2) &#123;</span><br><span class="line">    Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">            map.put(list1[i],i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int index = Integer.MAX_VALUE;</span><br><span class="line">        Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; list2.length; i++) &#123;</span><br><span class="line">            if (map.containsKey(list2[i]))&#123;</span><br><span class="line">                //使用钥匙找到值</span><br><span class="line">                int b = map.get(list2[i]);</span><br><span class="line">                if(b+i&lt;index)&#123;</span><br><span class="line">                 //如果搜索和小于，原来搜索和最小值，则清空列表重新计算</span><br><span class="line">                    queue.clear();</span><br><span class="line">                    queue.add(list2[i]);</span><br><span class="line">                    index = b+i;</span><br><span class="line">                &#125;else if(b+i==index)&#123;</span><br><span class="line">                  //若搜索和与最小值相等，则加入最小搜索值队列</span><br><span class="line">                    queue.add(list2[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return queue.toArray(new String[queue.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;599-两个列表的最小索引总和&quot;&gt;&lt;a href=&quot;#599-两个列表的最小索引总和&quot; class=&quot;headerlink&quot; title=&quot;599. 两个列表的最小索引总和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problem</summary>
      
    
    
    
    
    <category term="哈希表" scheme="http://baiyi-ing.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>差分</title>
    <link href="http://baiyi-ing.github.io/2022/03/14/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E5%B7%AE%E5%88%86/"/>
    <id>http://baiyi-ing.github.io/2022/03/14/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E5%B7%AE%E5%88%86/</id>
    <published>2022-03-14T02:55:02.000Z</published>
    <updated>2022-03-21T20:27:47.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a><a href="https://www.acwing.com/problem/content/799/">差分</a></h1><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><p>输入一个长度为 nn 的整数序列。</p><p>接下来输入 mm 个操作，每个操作包含三个整数 l,r,cl,r,c，表示将序列中 [l,r][l,r] 之间的每个数加上 cc。</p><p>请你输出进行完所有操作后的序列。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个整数 nn 和 mm。</p><p>第二行包含 nn 个整数，表示整数序列。</p><p>接下来 mm 行，每行包含三个整数 l，r，cl，r，c，表示一个操作。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>共一行，包含 nn 个整数，表示最终序列。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤n,m≤1000001≤n,m≤100000,<br>1≤l≤r≤n1≤l≤r≤n,<br>−1000≤c≤1000−1000≤c≤1000,<br>−1000≤整数序列中元素的值≤1000−1000≤整数序列中元素的值≤1000</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">1 2 2 1 2 1</span><br><span class="line">1 3 1</span><br><span class="line">3 5 1</span><br><span class="line">1 6 1</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 5 3 4 2</span><br></pre></td></tr></table></figure><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><ol><li><p>差分可以用于计算其中任意一段数组的加减，并且每次加减时间控制在O(1)</p></li><li><p>差分是前缀和的逆运算（<a href="https://baiyi-ing.github.io/2022/03/07/Java%E5%9F%BA%E7%A1%80/%E4%B8%80%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/">前缀和</a>是预先知道a[n],后计算S[n],以达到可以在O(1)时间段内，计算任意一段数据的和的目的）</p></li><li><p>前置条件：假设原来给定数组为S[n]（或自己计算出S[n]）,则计算差分数组可以为**a[n] &#x3D; S[n]-S[n-1]**。</p></li><li><p>计算基础：计算让原来的素组任意一段加减一个常数c，相当于<strong>S[l~r]-c</strong></p></li><li><p>核心计算：要知道某一段<strong>前缀和数据S[l~r]突然全部加了相同的一个数</strong>，可以被看做<strong>a[n]中的一个数据加了c而导致的连锁效应</strong>，而且S[0 ~ l-1]，S[r+1<del>n]两段数据值没有改变，那我们就可以把**S[l</del>r]+c**这个过程简化为 <strong>a[l]+c， a[r+1]-c</strong>，这样复杂度就瞬间见下降。</p></li></ol><h2 id="笔者代码"><a href="#笔者代码" class="headerlink" title="笔者代码"></a>笔者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**一维差分</span></span><br><span class="line"><span class="comment"> * 给某一段加上数值*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入si</span></span><br><span class="line">        <span class="type">int</span>[] si = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            si[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算ai = s[i]-s[i-1]</span></span><br><span class="line">        <span class="type">int</span>[] ai = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            ai[i] = si[i] -si[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由题可知s[l~r]+c = c+bl+......+br不影响s[l]之前</span></span><br><span class="line">        <span class="comment">//为了不影响s[r]之后的前缀和数值，我们将b[r+1]-c</span></span><br><span class="line">        <span class="comment">//则s[l~r]可以简化为 b[l]+=c,b[r]-=c</span></span><br><span class="line">        <span class="type">int</span> l,r,c;</span><br><span class="line">        <span class="keyword">while</span>(m--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            l = scanner.nextInt();</span><br><span class="line">            r = scanner.nextInt();</span><br><span class="line">            c = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">            ai[l] += c;</span><br><span class="line">            <span class="keyword">if</span>(r&lt;n)&#123;</span><br><span class="line">                ai[r+<span class="number">1</span>] -= c;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新si</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            si[i] = ai[i] + si[i-<span class="number">1</span>];</span><br><span class="line">            System.out.print(si[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="相关简单题"><a href="#相关简单题" class="headerlink" title="相关简单题"></a>相关简单题</h2><p><a href="https://www.acwing.com/problem/content/799/">AcWing 797. 差分</a></p><p><a href="https://www.acwing.com/problem/content/2043/">AcWing 2041. 干草堆</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;差分&quot;&gt;&lt;a href=&quot;#差分&quot; class=&quot;headerlink&quot; title=&quot;差分&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.</summary>
      
    
    
    
    
    <category term="前缀和" scheme="http://baiyi-ing.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>二维前缀和</title>
    <link href="http://baiyi-ing.github.io/2022/03/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <id>http://baiyi-ing.github.io/2022/03/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <published>2022-03-07T12:22:03.000Z</published>
    <updated>2022-03-21T20:27:47.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AcWing-796-子矩阵的和"><a href="#AcWing-796-子矩阵的和" class="headerlink" title="AcWing 796. 子矩阵的和"></a><a href="https://www.acwing.com/problem/content/798/">AcWing 796. 子矩阵的和</a></h1><h2 id="一-题目详情"><a href="#一-题目详情" class="headerlink" title="一. 题目详情"></a>一. 题目详情</h2><p>输入一个 nn 行 mm 列的整数矩阵，再输入 qq 个询问，每个询问包含四个整数 x1,y1,x2,y2x1,y1,x2,y2，表示一个子矩阵的左上角坐标和右下角坐标。</p><p>对于每个询问输出子矩阵中所有数的和。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含三个整数 n，m，qn，m，q。</p><p>接下来 nn 行，每行包含 mm 个整数，表示整数矩阵。</p><p>接下来 qq 行，每行包含四个整数 x1,y1,x2,y2x1,y1,x2,y2，表示一组询问。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>共 qq 行，每行输出一个询问的结果。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤n,m≤10001≤n,m≤1000,<br>1≤q≤2000001≤q≤200000,<br>1≤x1≤x2≤n1≤x1≤x2≤n,<br>1≤y1≤y2≤m1≤y1≤y2≤m,<br>−1000≤矩阵内元素的值≤1000−1000≤矩阵内元素的值≤1000</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3 4 3</span><br><span class="line">1 7 2 4</span><br><span class="line">3 6 2 8</span><br><span class="line">2 1 2 3</span><br><span class="line">1 1 2 2</span><br><span class="line">2 1 3 4</span><br><span class="line">1 3 3 4</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">17</span><br><span class="line">27</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h2 id="二-算法思想"><a href="#二-算法思想" class="headerlink" title="二. 算法思想"></a>二. 算法思想</h2><p><img src="https://s2.loli.net/2022/03/07/DoCXLxraynBO5MG.png" alt="image.png"></p><table><thead><tr><th align="left"></th><th><strong>计算s[i,j]</strong></th><th><strong>计算s[(x1,y1)(x2,y2)]</strong></th></tr></thead><tbody><tr><td align="left"><strong>红点</strong></td><td>a[i,j]</td><td>a[x2,y2]</td></tr><tr><td align="left"><strong>绿点</strong></td><td>a[i-1,j-1]</td><td>a[x1-1,y1-1]  (x1,y1）系类减了1才不在范围四点包围内)</td></tr><tr><td align="left"><strong>黄点</strong></td><td>a[i,j-1]</td><td>a[x1-1,y2]（同上）</td></tr><tr><td align="left"><strong>蓝点</strong></td><td>a[i,j-1]</td><td>a[x2,y1-1]（同上）</td></tr></tbody></table><p><strong>1. 计算前缀和s[i,j] &#x3D; a[i,j] - s[i-1,j]-s[i,j-1]+s[i-1,j-1]</strong></p><p>红点 + 两蓝面 -（两南面重合多加的黄面）</p><p><strong>2. 计算区域前缀和 s[(x1,y1)~(x2,y2)]&#x3D;s[x2,y2]-s[x1-1,y2]-s[x2,y1-1]+s[x-1,y-1]</strong></p><p>最大框内正方形 - 两蓝面 +（两南面重合多减的黄面）</p><h2 id="三-笔者代码"><a href="#三-笔者代码" class="headerlink" title="三. 笔者代码"></a><strong>三. 笔者代码</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**二维前缀和*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入ai</span></span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m ; j++) &#123;</span><br><span class="line">                a[i][j] = scanner.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算二维前缀和</span></span><br><span class="line">        <span class="type">int</span>[][] s = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m ; j++) &#123;</span><br><span class="line">                s[i][j] = a[i][j]+s[i-<span class="number">1</span>][j]+s[i][j-<span class="number">1</span>]-s[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算任意面积</span></span><br><span class="line">        <span class="type">int</span> sum,x1,x2,y1,y2;</span><br><span class="line">        <span class="keyword">while</span> (q--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            x1 = scanner.nextInt();</span><br><span class="line">            y1 = scanner.nextInt();</span><br><span class="line">            x2 = scanner.nextInt();</span><br><span class="line">            y2 = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">            sum = s[x2][y2] - s[x2][y1-<span class="number">1</span>]-s[x1-<span class="number">1</span>][y2] + s[x1-<span class="number">1</span>][y1-<span class="number">1</span>];</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AcWing-796-子矩阵的和&quot;&gt;&lt;a href=&quot;#AcWing-796-子矩阵的和&quot; class=&quot;headerlink&quot; title=&quot;AcWing 796. 子矩阵的和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/probl</summary>
      
    
    
    
    
    <category term="前缀和" scheme="http://baiyi-ing.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>一维前缀和</title>
    <link href="http://baiyi-ing.github.io/2022/03/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E4%B8%80%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <id>http://baiyi-ing.github.io/2022/03/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/%E4%B8%80%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <published>2022-03-07T12:21:45.000Z</published>
    <updated>2022-03-21T20:27:47.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AcWing-795-前缀和"><a href="#AcWing-795-前缀和" class="headerlink" title="AcWing 795. 前缀和"></a><a href="https://www.acwing.com/problem/content/797/">AcWing 795. 前缀和</a></h1><h2 id="一-题目详情"><a href="#一-题目详情" class="headerlink" title="一. 题目详情"></a>一. 题目详情</h2><p>输入一个长度为 nn 的整数序列。</p><p>接下来再输入 mm 个询问，每个询问输入一对 l,rl,r。</p><p>对于每个询问，输出原序列中从第 ll 个数到第 rr 个数的和。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个整数 nn 和 mm。</p><p>第二行包含 nn 个整数，表示整数数列。</p><p>接下来 mm 行，每行包含两个整数 ll 和 rr，表示一个询问的区间范围。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>共 mm 行，每行输出一个询问的结果。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤l≤r≤n1≤l≤r≤n,<br>1≤n,m≤1000001≤n,m≤100000,<br>−1000≤数列中元素的值≤1000−1000≤数列中元素的值≤1000</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">2 1 3 6 4</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">6</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="二-算法思想"><a href="#二-算法思想" class="headerlink" title="二. 算法思想"></a>二. 算法思想</h2><ol><li><p>sn &#x3D; a1+a2+a3……+an 前缀和基本思想</p></li><li><p>sn &#x3D; an+s[n-1]  用于计算新的前缀和</p></li><li><p><strong>s[l,r] &#x3D; s[r] - s[l-1]</strong> 用于计算l~r的和</p></li></ol><h2 id="三-笔者代码"><a href="#三-笔者代码" class="headerlink" title="三. 笔者代码"></a>三. 笔者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**一维前缀和*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化ai</span></span><br><span class="line">        <span class="type">int</span>[] ai = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ai[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化si</span></span><br><span class="line">        <span class="type">int</span>[] si = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            si[i] = si[i-<span class="number">1</span>] + ai[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Sum(l,r) = sr-s(l-1);计算前缀和</span></span><br><span class="line">        <span class="type">int</span> l,r,sum;</span><br><span class="line">        <span class="keyword">while</span>(m--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            l = scanner.nextInt();</span><br><span class="line">            r = scanner.nextInt();</span><br><span class="line">            sum = si[r] - si[l-<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//输出l~r的和</span></span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AcWing-795-前缀和&quot;&gt;&lt;a href=&quot;#AcWing-795-前缀和&quot; class=&quot;headerlink&quot; title=&quot;AcWing 795. 前缀和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/con</summary>
      
    
    
    
    
    <category term="前缀和" scheme="http://baiyi-ing.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>ACwing4309-消灭老鼠</title>
    <link href="http://baiyi-ing.github.io/2022/03/06/ACwing/ACwing4309-%E6%B6%88%E7%81%AD%E8%80%81%E9%BC%A0/"/>
    <id>http://baiyi-ing.github.io/2022/03/06/ACwing/ACwing4309-%E6%B6%88%E7%81%AD%E8%80%81%E9%BC%A0/</id>
    <published>2022-03-06T09:27:34.000Z</published>
    <updated>2022-03-21T20:27:47.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4309-消灭老鼠"><a href="#4309-消灭老鼠" class="headerlink" title="4309. 消灭老鼠"></a><a href="https://www.acwing.com/problem/content/description/4312/">4309. 消灭老鼠</a></h1><h2 id="一-题目详情"><a href="#一-题目详情" class="headerlink" title="一. 题目详情"></a>一. 题目详情</h2><p>约翰的农场可以看作一个二维平面。</p><p>农场中有 n 个老鼠，在毁坏着农田。</p><p>第 i个老鼠的位置坐标为 (xi,yi)。</p><p>不同老鼠可能位于同一位置。</p><p>在 (x0,y0)处，装有一个双向发射的激光枪，该位置没有老鼠。</p><p>激光枪每次发射都可以将穿过点 (x0,y0) 的某一条直线上的所有老鼠都消灭掉。</p><p>请问，为了消灭所有老鼠，至少需要激光枪发射几次。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含三个整数 n,x0,y0表示共有 n 只老鼠，激光枪的位置为 (x0,y0)。</p><p>接下来 n 行，每行包含两个整数 xi,yi 表示第 ii 只老鼠的位置为 (xi,yi)。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数，表示激光枪的最少发射次数。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>前 55 个测试点满足 1≤n≤5。<br>所有测试点满足 1≤n≤1000，−104≤xi,yi≤104。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 0 0</span><br><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">2 0</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 1 2</span><br><span class="line">1 1</span><br><span class="line">1 0</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="二-问题梳理"><a href="#二-问题梳理" class="headerlink" title="二. 问题梳理"></a>二. 问题梳理</h2><p>因为激光枪射线是<strong>双向发射</strong>的，所以此题为经典的直线扫描在四周问题，我们的目光主要集中在如下几个方面</p><ol><li>怎样表达直线，有斜率截距法、向量法等</li><li>怎样存储直线</li><li>怎样判断直线是否已经存在</li></ol><h2 id="三-作者代码"><a href="#三-作者代码" class="headerlink" title="三. 作者代码"></a>三. 作者代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="comment">//输入x0,y0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x0</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">y0</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="type">int</span> y,x,count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//输入小鼠位置</span></span><br><span class="line">            x = scanner.nextInt();</span><br><span class="line">            y = scanner.nextInt();</span><br><span class="line">            <span class="comment">//求向量（x-x0，y-y0）</span></span><br><span class="line">            x -= x0;y -= y0;</span><br><span class="line">            <span class="comment">//求x,y的最大公约数，求双方向量</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span>gcd(x,y);</span><br><span class="line">            <span class="comment">//除双方最大公约数</span></span><br><span class="line">            x /=mod;y /=mod;</span><br><span class="line">            <span class="comment">//因为向量是有方向的，所以我们统一把x都设为正</span></span><br><span class="line">            <span class="comment">//这样一条直线的不同方向向量变成了一个方向</span></span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;x = -x;y = -y;&#125;</span><br><span class="line">            <span class="comment">//数据范围内不重复存储</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> x*<span class="number">10000</span>+y;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//储存进set中，若已经存在则不加入，count记录直线数目</span></span><br><span class="line">            <span class="keyword">if</span>(!set.contains(temp))&#123;</span><br><span class="line">                count++;</span><br><span class="line">                set.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (b!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a%b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4309-消灭老鼠&quot;&gt;&lt;a href=&quot;#4309-消灭老鼠&quot; class=&quot;headerlink&quot; title=&quot;4309. 消灭老鼠&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/descriptio</summary>
      
    
    
    
    
    <category term="直线向量" scheme="http://baiyi-ing.github.io/tags/%E7%9B%B4%E7%BA%BF%E5%90%91%E9%87%8F/"/>
    
  </entry>
  
</feed>
